{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/ICS_Lab1/bits_btest.JPG","path":"img/ICS_Lab1/bits_btest.JPG","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab1/bits_dlc.png","path":"img/ICS_Lab1/bits_dlc.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab1/bits_honor_btest.JPG","path":"img/ICS_Lab1/bits_honor_btest.JPG","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab1/bits_honor_dlc.png","path":"img/ICS_Lab1/bits_honor_dlc.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab1/top.jpg","path":"img/ICS_Lab1/top.jpg","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_016df1440f7044a54fb4ced529595b58.png","path":"img/ICS_Lab2/upload_016df1440f7044a54fb4ced529595b58.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_244e1f55d2823d58f65eabab9478d7ce.png","path":"img/ICS_Lab2/upload_244e1f55d2823d58f65eabab9478d7ce.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_27148224f8cf2be48266eaa52f50b2f8.png","path":"img/ICS_Lab2/upload_27148224f8cf2be48266eaa52f50b2f8.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_4801c7e177c56f6e7299c273d0120988.png","path":"img/ICS_Lab2/upload_4801c7e177c56f6e7299c273d0120988.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_64ed470376ec6b72dc43690bf9b4ea0e.png","path":"img/ICS_Lab2/upload_64ed470376ec6b72dc43690bf9b4ea0e.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_7194e52688ff3d696a3b889e2b17d63f.png","path":"img/ICS_Lab2/upload_7194e52688ff3d696a3b889e2b17d63f.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_9ea5cd30293a18357af1da93c35e0f59.png","path":"img/ICS_Lab2/upload_9ea5cd30293a18357af1da93c35e0f59.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png","path":"img/ICS_Lab2/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_ae5e359c30ff5ccb9292a7472c39eb19.png","path":"img/ICS_Lab2/upload_ae5e359c30ff5ccb9292a7472c39eb19.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_dfddd1801cd10c701dd2753164434977.png","path":"img/ICS_Lab2/upload_dfddd1801cd10c701dd2753164434977.png","modified":0,"renderable":0},{"_id":"source/img/ICS_Lab2/upload_f2ecdd05728cbefbba59b068a29fdfdc.png","path":"img/ICS_Lab2/upload_f2ecdd05728cbefbba59b068a29fdfdc.png","modified":0,"renderable":0},{"_id":"source/img/hello_world/top.png","path":"img/hello_world/top.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/bg2.jpg","path":"img/bg2.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/bg_in.jpg","path":"img/bg_in.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/duration.js","path":"js/duration.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"96339fc96664202fcd939ff619c96de47114eae1","modified":1604646066073},{"_id":"source/_posts/hello-world.md","hash":"217f89b2f0c21b44e5cdcfbf2bd5659116adc904","modified":1604670776652},{"_id":"source/_posts/ICS_Lab1.md","hash":"6279b2d5cc2a3b74c18eb26f08c8569bc8ba1361","modified":1604670703083},{"_id":"source/_posts/ICS_Lab2.md","hash":"a1ad5879b109041cd279a4748bc0ca67d1ccf9f5","modified":1604670768953},{"_id":"source/about/index.md","hash":"d19ef6b3db3f8159a0b51facf4ffbbcb877bc2ae","modified":1604586167518},{"_id":"source/img/ICS_Lab1/.DS_Store","hash":"3644d2a969a48867287119213604eddc91a7af44","modified":1604626120751},{"_id":"source/img/ICS_Lab1/bits_honor_dlc.png","hash":"72b1d169d0c3703bd268e98134eff20a0e0cc31d","modified":1602087878000},{"_id":"source/img/ICS_Lab1/top.jpg","hash":"72a892ba4833d2e1d3c0bdb6a35d3a8d33e8e8cd","modified":1604592245848},{"_id":"source/img/ICS_Lab2/.DS_Store","hash":"ee6df2f45dbbecef218431e70c9d5937af39da22","modified":1604670116108},{"_id":"source/img/ICS_Lab2/upload_4801c7e177c56f6e7299c273d0120988.png","hash":"e59229dcd7bdc1dc4ddb52601b58d5a5dd8557c6","modified":1604649102324},{"_id":"source/img/hello_world/.DS_Store","hash":"3db878c166c09f6b2e7c687494d479908cb0ec43","modified":1604592201178},{"_id":"source/img/ICS_Lab2/upload_f2ecdd05728cbefbba59b068a29fdfdc.png","hash":"fc4024d6fb85e7850ba440cd56a267ed060a959a","modified":1604649401509},{"_id":"source/img/ICS_Lab1/bits_btest.JPG","hash":"647438ec455ecd7a47d6167eb2094f815f800d41","modified":1602068098000},{"_id":"source/img/ICS_Lab1/bits_dlc.png","hash":"e8b818f78cd50dae1edd45dab9267c3069edbc02","modified":1602087872000},{"_id":"source/img/ICS_Lab1/bits_honor_btest.JPG","hash":"8e1b2a958402a82be827e9d37272389e9d07b38c","modified":1602068098000},{"_id":"source/img/ICS_Lab2/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png","hash":"3150fbc95d0db988078ce153187bd333140a3e3d","modified":1604649415745},{"_id":"source/img/ICS_Lab2/upload_7194e52688ff3d696a3b889e2b17d63f.png","hash":"a12aa8b9911ff42e1c7fd341740bb5952026b617","modified":1604649285328},{"_id":"source/img/ICS_Lab2/upload_dfddd1801cd10c701dd2753164434977.png","hash":"18eb25f8c6db5cb7bd810129130c7d6dad71a54c","modified":1604649443778},{"_id":"source/img/ICS_Lab2/upload_ae5e359c30ff5ccb9292a7472c39eb19.png","hash":"6d1014f0788ac311e23beef2c59d068f472f86df","modified":1604649165829},{"_id":"source/img/ICS_Lab2/upload_016df1440f7044a54fb4ced529595b58.png","hash":"4ed4e36ce65df848c9e45f7c8b417ec9c1b7db2a","modified":1604649254276},{"_id":"source/img/ICS_Lab2/upload_27148224f8cf2be48266eaa52f50b2f8.png","hash":"f671afdbca16a239e220b637c08410e667950412","modified":1604649141522},{"_id":"source/img/ICS_Lab2/upload_244e1f55d2823d58f65eabab9478d7ce.png","hash":"8fc4327e7e7b113cd61b14f62890d8debe0179eb","modified":1604649049503},{"_id":"source/img/hello_world/top.png","hash":"c61a20a651af82f4a2fd5e6f3724fc36e148fa07","modified":1604592053532},{"_id":"source/img/ICS_Lab2/upload_9ea5cd30293a18357af1da93c35e0f59.png","hash":"7321e52b83920d6f097ef999870bb72d3ece131a","modified":1604649387440},{"_id":"source/img/ICS_Lab2/upload_64ed470376ec6b72dc43690bf9b4ea0e.png","hash":"70d23c7516d816392111cc32620a4ed82b9f6263","modified":1604649440360},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604556361000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1604556361000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1604556361000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1604556361000},{"_id":"themes/fluid/.DS_Store","hash":"5c55490e6948dc1ae0fcc0d03b220bdf902ebcf7","modified":1604646088052},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1604556361000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1604556361000},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1604556361000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1604556361000},{"_id":"themes/fluid/README.md","hash":"ea55d234aeae3eb9e232f729f8411810d65c6f49","modified":1604556361000},{"_id":"themes/fluid/package.json","hash":"623e6f2dc876daa6ab599fbac4636f54782e6ea3","modified":1604556361000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1604556361000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1604556361000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1604556361000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1604556361000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1604556361000},{"_id":"themes/fluid/_config.yml","hash":"fcbffcb432e5fc07074b5578b5fa770d49f8d4f2","modified":1604648473367},{"_id":"themes/fluid/layout/about.ejs","hash":"e3e2de8b0dc63ece51c324bb7942f240cdbfc7bf","modified":1604556361000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1604556361000},{"_id":"themes/fluid/layout/layout.ejs","hash":"d772721214358a658cfacaecb194d9c6db971488","modified":1604556361000},{"_id":"themes/fluid/layout/index.ejs","hash":"58e994d28fd72d585d2e4c63d0c0fd3e61dd14b8","modified":1604556361000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1604556361000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":1604556361000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1604556361000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1604556361000},{"_id":"themes/fluid/layout/post.ejs","hash":"f334657509a9b8b4e05d425d3e5f47a1c21b7dd7","modified":1604556361000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1604556361000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1604556361000},{"_id":"themes/fluid/source/.DS_Store","hash":"d40ab92f7a0f721815edab70813bbaa1375bfeb9","modified":1604646088054},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1604556361000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"bccd7961fa146dd5f0d70f77e7ab94e9f58d5bd3","modified":1604556361000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"ea590a8e8e48148335b94aebca2b73c19bd5f789","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"382bd3ee27bc6d90776fc9171a487ff208bc4caa","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"ab70ddfcf7b14c7000130d1a2b54c75dde106d66","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"bed4ee45bec0f1f1d3ed469e3197bb8f5e0b684e","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"1d2ea9c4c905bc4b8e1c64c717246f583bd583ee","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1604556361000},{"_id":"themes/fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":1604556361000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1604556361000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"fd567dccd9ea8c158a5dae6847dd99e272c3f43c","modified":1604556361000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1604556361000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"2ec0e2c79de89886c67391d5e94b0f18b2a6021e","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1604556361000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1604556361000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1604556361000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1604556361000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"49ede3a659805a94c9153e0dbc2bde6deaaa7e14","modified":1604646517873},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1604556361000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1604556361000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1604556361000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1604556361000},{"_id":"themes/fluid/source/img/favicon.png","hash":"2defc5fd93898cf749f0ae180f5cf5df12448e6a","modified":1604587528863},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1604556361000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1604556361000},{"_id":"themes/fluid/source/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":1604556361000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1604556361000},{"_id":"themes/fluid/source/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":1604556361000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1604556361000},{"_id":"themes/fluid/source/js/duration.js","hash":"3c20a17ff6eafdb6792f6dd10f25b855a6a891ca","modified":1604648512579},{"_id":"themes/fluid/source/js/leancloud.js","hash":"23e567d77127f5787b0fc7091ddfa085c53b82f4","modified":1604556361000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1604556361000},{"_id":"themes/fluid/source/js/plugins.js","hash":"67d68cd2da25edbc98d433f34cf79039d5cdb082","modified":1604556361000},{"_id":"themes/fluid/source/js/utils.js","hash":"17ef83ebf76b262ce2cb09c49a15fb1522b82982","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"335b52bfa1cdd671cec1c4d745216d8404b2df45","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"3cd99f13535e444fff65c97a1f60e838aeaadba6","modified":1604556361000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"1b42e725454f3ae8d3bff086afcc294ca2fdeb72","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"1e9c4364df5a0971087f779f87f33960e3674124","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"593649f7e3f86779649e078b69f6fdc584648d72","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"d7d689156a8d2a6b00b306bd30628fa961449135","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"71239ad210d24ad10a01c339590a797062153e8a","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"899664e8eea0e77ffcff436a24198ee2da750d11","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"1e9ed2dde3050b5a650d0e45b9f712a6279f8f0c","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"38f6953e430d452d6608dacc4895ca623b4844a5","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"0283128db63cc25b565d0da3c8a2120cc45626d1","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"2264bec80ba051a19ba80396618f3d0c22948f0b","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"19245797dda67bc97d534a5c3f283ff6dfa8a321","modified":1604556361000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1604556361000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1604556361000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1604556361000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"94a8fb9c160386fce7dcd5ac886dee8cf3a4e750","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4304bab8ad087911cbf5025a41014fbb67f20b5a","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cc991a481214bf02c54cef4535d98ca45f8729f9","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"e3d4acfdf0647e89a7a88f53e754ea543641ae30","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1604556361000},{"_id":"themes/fluid/source/img/bg_in.jpg","hash":"32c81168dceca41a00e957ca40624fc88eacad49","modified":1604591337292},{"_id":"themes/fluid/source/img/bg.jpg","hash":"b538296f018be0191f38259344c965d36111c06d","modified":1604590815081},{"_id":"themes/fluid/source/img/bg2.jpg","hash":"e5b05a7511ac4e3de7cade9b7004392b2086f10c","modified":1604646379342},{"_id":"public/local-search.xml","hash":"f35243bcfaa38c21cb929af479ee4918c411383b","modified":1604670832894},{"_id":"public/about/index.html","hash":"b48b76f3787a2bc924537ff0775ac5e02318d6cb","modified":1604670832894},{"_id":"public/2020/11/05/hello-world/index.html","hash":"0b812d0309f734584803d094411a32215ac0ee20","modified":1604670832894},{"_id":"public/archives/2020/index.html","hash":"6f200d49bb3a0f345e95f3dad37cf82545caeb69","modified":1604670832894},{"_id":"public/archives/index.html","hash":"6f200d49bb3a0f345e95f3dad37cf82545caeb69","modified":1604670832894},{"_id":"public/archives/2020/11/index.html","hash":"6f200d49bb3a0f345e95f3dad37cf82545caeb69","modified":1604670832894},{"_id":"public/categories/ICS/index.html","hash":"c29469a41e4285744eab09dcd1c7a73ad8dce991","modified":1604670832894},{"_id":"public/index.html","hash":"0376edeb4fca61a286292d78eaf38c6a9d5546b2","modified":1604670832894},{"_id":"public/tags/Assembly/index.html","hash":"a2ec555577e7d5cccb4c618c3ec382b705c6fb38","modified":1604670832894},{"_id":"public/tags/Hexo/index.html","hash":"b557f495d7c5e2ccc53bc9f7ab4567f0d9026597","modified":1604670832894},{"_id":"public/tags/Fluid/index.html","hash":"518f130fdd349b3e83765e1320faf4bd939ae11f","modified":1604670832894},{"_id":"public/tags/Bits/index.html","hash":"69e3f2c5b11fcb7e0e1a6c14bc5821142ac07d68","modified":1604670832894},{"_id":"public/404.html","hash":"7c651c4cecd8d101d854b0223ce7b6a2c9f6344f","modified":1604670832894},{"_id":"public/tags/index.html","hash":"3146d6b36c5ce2c9250964e60b76a5341e5f0a6f","modified":1604670832894},{"_id":"public/categories/index.html","hash":"d4d400e5c1c6999b54f66c35d5df90ba33da952e","modified":1604670832894},{"_id":"public/2020/11/06/ICS_Lab2/index.html","hash":"3d41efb8f2299732e2aee9b32643b18bea862bfa","modified":1604670832894},{"_id":"public/2020/11/05/ICS_Lab1/index.html","hash":"d9f099a5f18c6fd042a6d90dc4d27e82d53a0da3","modified":1604670832894},{"_id":"public/links/index.html","hash":"2f32723a6bc49c52b4fd80ba1a7b2d04f9aad1a1","modified":1604670832894},{"_id":"public/img/ICS_Lab1/bits_honor_dlc.png","hash":"72b1d169d0c3703bd268e98134eff20a0e0cc31d","modified":1604670832894},{"_id":"public/img/ICS_Lab1/top.jpg","hash":"72a892ba4833d2e1d3c0bdb6a35d3a8d33e8e8cd","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_4801c7e177c56f6e7299c273d0120988.png","hash":"e59229dcd7bdc1dc4ddb52601b58d5a5dd8557c6","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_f2ecdd05728cbefbba59b068a29fdfdc.png","hash":"fc4024d6fb85e7850ba440cd56a267ed060a959a","modified":1604670832894},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1604670832894},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1604670832894},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1604670832894},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1604670832894},{"_id":"public/img/favicon.png","hash":"2defc5fd93898cf749f0ae180f5cf5df12448e6a","modified":1604670832894},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1604670832894},{"_id":"public/img/ICS_Lab1/bits_honor_btest.JPG","hash":"8e1b2a958402a82be827e9d37272389e9d07b38c","modified":1604670832894},{"_id":"public/img/ICS_Lab1/bits_dlc.png","hash":"e8b818f78cd50dae1edd45dab9267c3069edbc02","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_7194e52688ff3d696a3b889e2b17d63f.png","hash":"a12aa8b9911ff42e1c7fd341740bb5952026b617","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png","hash":"3150fbc95d0db988078ce153187bd333140a3e3d","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_ae5e359c30ff5ccb9292a7472c39eb19.png","hash":"6d1014f0788ac311e23beef2c59d068f472f86df","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_dfddd1801cd10c701dd2753164434977.png","hash":"18eb25f8c6db5cb7bd810129130c7d6dad71a54c","modified":1604670832894},{"_id":"public/img/ICS_Lab1/bits_btest.JPG","hash":"647438ec455ecd7a47d6167eb2094f815f800d41","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_016df1440f7044a54fb4ced529595b58.png","hash":"4ed4e36ce65df848c9e45f7c8b417ec9c1b7db2a","modified":1604670832894},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1604670832894},{"_id":"public/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":1604670832894},{"_id":"public/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":1604670832894},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1604670832894},{"_id":"public/js/duration.js","hash":"3c20a17ff6eafdb6792f6dd10f25b855a6a891ca","modified":1604670832894},{"_id":"public/js/leancloud.js","hash":"23e567d77127f5787b0fc7091ddfa085c53b82f4","modified":1604670832894},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1604670832894},{"_id":"public/js/utils.js","hash":"17ef83ebf76b262ce2cb09c49a15fb1522b82982","modified":1604670832894},{"_id":"public/js/plugins.js","hash":"67d68cd2da25edbc98d433f34cf79039d5cdb082","modified":1604670832894},{"_id":"public/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1604670832894},{"_id":"public/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1604670832894},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1604670832894},{"_id":"public/css/main.css","hash":"ba2373ca7ec663423d720b75ded979fefcd98111","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_244e1f55d2823d58f65eabab9478d7ce.png","hash":"8fc4327e7e7b113cd61b14f62890d8debe0179eb","modified":1604670832894},{"_id":"public/img/hello_world/top.png","hash":"c61a20a651af82f4a2fd5e6f3724fc36e148fa07","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_27148224f8cf2be48266eaa52f50b2f8.png","hash":"f671afdbca16a239e220b637c08410e667950412","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_9ea5cd30293a18357af1da93c35e0f59.png","hash":"7321e52b83920d6f097ef999870bb72d3ece131a","modified":1604670832894},{"_id":"public/img/ICS_Lab2/upload_64ed470376ec6b72dc43690bf9b4ea0e.png","hash":"70d23c7516d816392111cc32620a4ed82b9f6263","modified":1604670832894},{"_id":"public/img/bg_in.jpg","hash":"32c81168dceca41a00e957ca40624fc88eacad49","modified":1604670832894},{"_id":"public/img/bg.jpg","hash":"b538296f018be0191f38259344c965d36111c06d","modified":1604670832894},{"_id":"public/img/bg2.jpg","hash":"e5b05a7511ac4e3de7cade9b7004392b2086f10c","modified":1604670832894}],"Category":[{"name":"ICS","_id":"ckh6bkz8n0003kopde2cv45a7"}],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n","updated":"2020-11-05T14:22:47.518Z","path":"about/index.html","comments":1,"_id":"ckh6bkz8d0000kopdf0xwblev","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ICS-Lab2 二进制炸弹","index_img":"/img/ICS-Lab2/top.jpg","date":"2020-11-06T07:44:39.000Z","_content":"\n# ICS-Lab2-Bomb\n\n> 这个是CS:APP的第二个lab，主要着重于汇编代码的阅读\n\n***\n\n## 完成截图\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_244e1f55d2823d58f65eabab9478d7ce.png></img>\n\n***\n\n## Phase 1 - 入门\n### 一、分析\n\n> 练手入门题，用esi寄存器储存答案地址 (一个立即数)\n```\nmov    $0x402400,%esi\n```\n> 之后调用了一个 string_not_equal 函数比较输入和答案是否一致，一致就通过了。\n```\ncallq  401338 <strings_not_equal>\n```\n\n### 二、gdb调试\n> 看一下内存地址里面存了什么，获得flag\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_4801c7e177c56f6e7299c273d0120988.png></img>\n\n\n- **答案**: Border relations with Canada have never been better.\n\n***\n\n## Phase 2 - 循环\n### 分析\n\n> 本题是一个do while Loop, 难度不大, 耐心读就行了\n\n**关键位置**\n- 信息1 ： 看到 read_six_number 知道输入6个数，再往下看\n\n```\ncmpl   $0x1,(%rsp) # 比较栈顶地址所存变量大小是否为1\nje     400f30 <phase_2+0x34> # 如果为1 跳转至地址 400f30\ncallq  40143a <explode_bomb> # 如果不为1，直接炸了\njmp    400f30 <phase_2+0x34> # 跳转至地址 400f30\n```\n\n- 信息2 : 第一个数为1\n\n下面进入Loop Body\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_27148224f8cf2be48266eaa52f50b2f8.png></img>\n\n- 信息3 : \n可以看到这个循环把前一个数乘了2，跟后一个数比较, 如果相等就能够继续，不然就炸了。\n\n> 综上也就是说这是一个首项为1，公比为2的等比数列，共6项。\n\n所以答案就是 1 2 4 8 16 32\n\n***\n\n## Phase 3 - 分支\n### 分析\n\n> 第三题关键点在于用gdb查看一下jumptable\n\n 我们先看一下输入，在输入了两个变量后，esi里放了内存中的一个可疑的东西，我们用gdb看一眼。\n```\nmov    $0x4025cf,%esi\n```\n\n```shell=\n(gdb) p(char *) 0x4025cf\n\"%d %d\"\n```\n\n 发现原来是输入两个整型，再往下看\n\n```\ncmpl   $0x7,0x8(%rsp) # 将 M(rsp + 8) 看作32位无符号数跟7比较\nja     400fad <phase_3+0x6a> # 如果大于就跳转至 0x400fad (炸弹炸了)\n```\n\n 发现如果输入的第一个数大于7就爆炸了，看来switch最多只有7个case\n\n```\njmpq   *0x402470(,%rax,8) \n# 跳转至 (eax * 8 + 0x402470)处所存的地址 （jumptable）\n```\n\n> 最关键的是这一句，构造了一个 switch 的 jumptable，我们知道地址是 0x402470，按照 case * 8 + 0x402470 跳转到该地址里面的地址，所以我们用gdb看一下。\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_ae5e359c30ff5ccb9292a7472c39eb19.png></img>\n\n- 我通关选了case 1（它比较特殊，处理它其他内存地址跳转都是按case从小到大顺序的，只有case 1 在最后一个，当然其他也都能过。）\n\n- case 1 跳转到了 0x400fb9 地址\n\n```\nmov    $0x137,%eax \n# eax = 0x137 (311) (不用跳转了，下面就是 0x400fbe)\n```\n\n其将eax置为了0x137，要小心是16进制，所以对应十进制311\n\n```\ncmp    0xc(%rsp),%eax # 比较 M(rsp + 12) 和 eax\nje     400fc9 <phase_3+0x86> # 如果相等就跳转至 0x400fc9 (过关了！)\n```\n\n最后是一个比较，如果eax和第二个输入值相同就过了。\n\n- 本题答案（不唯一)\n\n| case | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n| :----: | :----: | :----: | :----: | :----: | :----: | :----: | :----: | :----: |\n| ans | 207 | 311 | 707 | 256 | 389 | 206 | 682 | 327 |\n\n\n***\n\n## Phase 4 - 递归\n### 分析\n- 这题是个递归，不过不用很深，很快就能看出答案。\n\n先正常读两个数，放在rdx，rcx中，检查输入。\n\n```\ncmpl   $0xe,0x8(%rsp) \n# 比较 M(rsp + 8) (既 rdx) 与 0xe\njbe    40103a <phase_4+0x2e> \n# 如果 rdx <= 0xe (14) 跳转至 0x40103a, 不然就炸了 (作为无符号数)\n```\n\n> 这两行汇编告诉我们，rdx一定要小于 0xe (14) 且大于等于0, 不然炸了, 大幅度缩小了范围。\n\n> 接下来就进入了函数递归调用，先做点预处理，把edx里面存一个立即数14，然后edi为第一个输入值，esi = 0 进入fun4\n\n```\nmov    $0xe,%edx # edx = 0xe (14)\nmov    $0x0,%esi # esi = 0\nmov    0x8(%rsp),%edi # edi = (第一个输入值)\ncallq  400fce <func4> # 调用func4\n```\n> 先不着急看fun4，先看看最后要怎么过关\n```\ntest   %eax,%eax # eax & eax\njne    401058 <phase_4+0x4c> \n# 如果ZF == 0 就跳转（既eax != 0)，跳转至 0x401058 炸了\ncmpl   $0x0,0xc(%rsp) # 比较 M(rsp + 12) 和 0\nje     40105d <phase_4+0x51> # 如果相等就跳转到 0x40105d, 不然就炸了\n```\n- test 实际上就是一个与操作，所以我们知道需要 eax == 0 且 M(rsp + 12) == 0，到这我们发现，第二个条件只要我们一开始输入的第二个参数为0，就能够保证，那么下面我们就要看进入fun4之后如何让返回值 eax == 0\n\n> 再回来看fun4，其分为两部分，一个是递归的主体，一个是判断是否继续递归。一开始先对eax 和 ecx 进行一些操作。\n- 我们发现 eax 和 ecx 的值在第一层递归都被置为14，(esi 为 0)按其操作得到 eax 除2, ecx 逻辑右移 31 位为0, 接着其实就是比较 edi 和 rax, **相当于就是比较第一个参数和常数 7**\n\n```\njle    400ff2 <func4+0x24> # 若ecx <= 就跳转至 0x400ff2\n```\n```\nmov    $0x0,%eax # eax = 0;\ncmp    %edi,%ecx # 比较 ecx 和 edi \njge    401007 <func4+0x39> \n# 若 edi >= ecx 跳转至 0x401007 返回\n```\n\n- 接着是一个跳转, 如果满足我们就跳转至 0x400ff2, 我们发现这里已经满足了我们需要的 eax == 0，而想要结束就得使 edi >= ecx (7), 所以我们发现，对于上下两个跳转条件，只要 edi == ecx == 7 就能一直成立，从而直接达成条件，不用进入递归。\n\n进而我们得到了本题答案：7 0\n\n***\n\n## Phase 5 - 指针\n### 分析\n- 这题我觉得是最好玩的一题，先直接分析如何通关。\n\n```\nmov    $0x40245e,%esi # esi = 0x40245e \n# 待比较的 string (flyers) 从 0x40245e 移动至 esi\n```\n\n- 我们在接近返回时看到了一个非常可疑的内存地址，直接给它打出来。\n\n```\n(gdb) p(char*) 0x40245e\n$4 = 0x40245e \"flyers\"\n```\n\n> 发现是一个可疑字符串 flyers，阅读上下文汇编代码可知，最后是比较字符串是否和指定字符串 \"flyers\" 一致。\n\n- 我们再往上看看要怎么输入\n\n```\ncallq  40131b <string_length> # 比较字符长度是否为6\ncmp    $0x6,%eax # 比较 eax 和 6\n```\n\n发现输入一定要是六个字符 *(于是试了试 flyers 果然不对)*\n\n- 往下看，发现了一个 Loop 循环了6次\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_016df1440f7044a54fb4ced529595b58.png></img>\n\n> 经过仔细阅读后，发现这个居然是遍历六个输入字符，将其 ascii 码低4位取出来作为偏移量 (offset),在一个基地址 （0x4024b0）后面取字符出来组成 flyers.\n\n- 立刻开启 gdb 查看基地址附近的内存\n\n**发现分别对应的偏移量是 9, 15, 14, 5, 6, 7**\n> 直接查 ascii 码，发现对应 ionefg 、IONEFG 或者有一些不是字母的字符也行，只要低四位是正确的就可以。 \n\n**本题答案:**  ionefg (答案不唯一)\n\n***\n\n## Phase 6 - Node结构体\n### 分析\n这题还是比较麻烦的，代码比较长也比较复杂，要耐心读。\n\n- 这题的代码可以大致分为输入检测与处理和一个对结构体的顺序检测.\n> 最开始上来先输入六个数之后有个双循环，外部保证输入的六个数要大于等于1，且小于等于6，内部保证互异。所以总体看来就是输入的六个数就是123456, 现在问题是输入的顺序。\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_7194e52688ff3d696a3b889e2b17d63f.png></img>\n\n这段代码遍历了所有输入并用7减去了输入的每个数，所以最后做出答案要记得反一下。\n\n- 接下来代码比较复杂，外面大循环循环了六次，内部有两个平行的小循环。作用是构造结构体，并在栈帧中将其存放位置按照输入的数的大小计算得出\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_9ea5cd30293a18357af1da93c35e0f59.png></img>\n\n\n> 分析代码，我们先发现一种特殊情况就是当前计算的数为1时（输入为6）edx直接就是给定的地址 0x6032d0, 其余的都按照其大小，在第一个小循环中循环相应次数，给 rdx 在原地址上相应偏移16位。\n\n> 接着下来将其存入栈帧中 rsp + 32 到 rsp + 80 的位置\n\n- 使用 gdb 查看 node\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_f2ecdd05728cbefbba59b068a29fdfdc.png></img>\n\n\n最后我们看如何通关\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png></img>\n\n> 发现通关条件是要求定序，前面node大于后面的节点，根据gdb node节点的值和要求我们得到了 3 4 5 6 1 2 的结果，最后不要忘记这是被7减过之后的结果，原来的输入要还原。所以答案就是 4 3 2 1 6 5\n\n**本题答案:** 4 3 2 1 6 5\n\n***\n\n## Secret Phase- 递归\n### 一、进入方法\n- 输入上面六种答案之后，发现 secret phase 并没有出现，于是开始着手寻找入口。\n\n> 根据最后结果出现的字符顺藤摸瓜找到了 phase_defuse 函数，一看发现其中有一个可疑的 <string_not_equal> 函数以及几个可疑的内存地址,统统用 gdb 打印。\n\n```\n(gdb) p(char*) 0x402619\n$2 = 0x402619 \"%d %d %s\"\n```\n\n```\n(gdb) p(char*) 0x402622\n$3 = 0x402622 \"DrEvil\"\n```\n\n> 发现之前调用过的__isoc99_sscanf@plt 还有隐藏用法，在输入两个数后再输入一个字符串 \"DrEvil\" 就能成功开启secret phase.\n\n- 所以我们在最后一次调用__isoc99_sscanf@plt的 phase 4 输入 7 0 DrEvil, 果然在 phase 6 之后进入了 secret phase。\n\n### 分析\n- 虽然说是隐藏关，但是复杂度和难度比 phase 6 低了不少，和 phase 4 一样是一个递归，但不同的是这次真的需要递归几次，但也不深。只要确定好路线还是比较容易的。\n\n```\ncallq  40149e <read_line> # 读一行\n...\ncallq  400bd0 <strtol@plt> # 调用 strtol@plt\n```\n\n> secret phase上来读了一整行然后调用了一个 strtol，经过阅读strtol的源码，发现它是以10为base将字符串转为一个整型，实际上就是剔除了最后答案中除了数字以外的字符。(所以写上答案数字然后乱输字母也能过 bushi)\n\n```\nlea    -0x1(%rax),%eax \n# eax = (rax) - 1\ncmp    $0x3e8,%eax \n# eax == 0x3e8 ? (即判断返回值与0x3e9)\n```\n\n- 这段代码告诉我们输入的数要小于 1000\n\n```\nmov    $0x6030f0,%edi # edi = 0x6030f0 (36)\ncallq  401204 <fun7> # 调用fun7\n```\n- 将edi置为 0x6030f0 (里面存的是36) 接着开始调用fun7\n\n> 我们先不着急看fun7, 老样子先看过关要求。\n\n```\ncmp    $0x2,%eax # 比较一下 eax 返回是否为2\n```\n\n发现非常简单，只要eax返回值为2就行\n\n- 再来看fun7\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_64ed470376ec6b72dc43690bf9b4ea0e.png></img>\n\n> 一看这个递归是逃不过了，但我们要让eax == 2, 路线其实非常明确，第一次先走 way3 将 eax 弄成1，再走 way1 让eax*2， 最后一层我们让eax == 0 最后返回我们得到的 eax 就等于2\n*（eax = 0 -> 1 -> 2）*\n\n> 关键是一个 edx 和 esi 的比较，edx == rdi, 然后每次改变rdi使其中储存地址中所储存的变量逐步接近 esi 完成递归操作。\n\n根据所存地址(注意/d打出的是10进制)，可以很容易找出递归路径\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_dfddd1801cd10c701dd2753164434977.png style=\"width:65%\"></img>\n\n- 输入22可以正好满足需求\n> **22 <= 36 因而 rdi = (rdi + 8) (存8)，22 > 8 因而 rdi = = (rdi + 16) (存22), 22==22 所以 eax 返回 0 ，返回 1， 返回2，最终过关**\n\n**本题答案:** 22 (可以带非数字字符)\n\n\n\n\n","source":"_posts/ICS_Lab2.md","raw":"---\ntitle: ICS-Lab2 二进制炸弹\nindex_img: /img/ICS-Lab2/top.jpg\ndate: 2020-11-06 15:44:39\ncategory: [ICS]\ntags: [Assembly]\n---\n\n# ICS-Lab2-Bomb\n\n> 这个是CS:APP的第二个lab，主要着重于汇编代码的阅读\n\n***\n\n## 完成截图\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_244e1f55d2823d58f65eabab9478d7ce.png></img>\n\n***\n\n## Phase 1 - 入门\n### 一、分析\n\n> 练手入门题，用esi寄存器储存答案地址 (一个立即数)\n```\nmov    $0x402400,%esi\n```\n> 之后调用了一个 string_not_equal 函数比较输入和答案是否一致，一致就通过了。\n```\ncallq  401338 <strings_not_equal>\n```\n\n### 二、gdb调试\n> 看一下内存地址里面存了什么，获得flag\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_4801c7e177c56f6e7299c273d0120988.png></img>\n\n\n- **答案**: Border relations with Canada have never been better.\n\n***\n\n## Phase 2 - 循环\n### 分析\n\n> 本题是一个do while Loop, 难度不大, 耐心读就行了\n\n**关键位置**\n- 信息1 ： 看到 read_six_number 知道输入6个数，再往下看\n\n```\ncmpl   $0x1,(%rsp) # 比较栈顶地址所存变量大小是否为1\nje     400f30 <phase_2+0x34> # 如果为1 跳转至地址 400f30\ncallq  40143a <explode_bomb> # 如果不为1，直接炸了\njmp    400f30 <phase_2+0x34> # 跳转至地址 400f30\n```\n\n- 信息2 : 第一个数为1\n\n下面进入Loop Body\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_27148224f8cf2be48266eaa52f50b2f8.png></img>\n\n- 信息3 : \n可以看到这个循环把前一个数乘了2，跟后一个数比较, 如果相等就能够继续，不然就炸了。\n\n> 综上也就是说这是一个首项为1，公比为2的等比数列，共6项。\n\n所以答案就是 1 2 4 8 16 32\n\n***\n\n## Phase 3 - 分支\n### 分析\n\n> 第三题关键点在于用gdb查看一下jumptable\n\n 我们先看一下输入，在输入了两个变量后，esi里放了内存中的一个可疑的东西，我们用gdb看一眼。\n```\nmov    $0x4025cf,%esi\n```\n\n```shell=\n(gdb) p(char *) 0x4025cf\n\"%d %d\"\n```\n\n 发现原来是输入两个整型，再往下看\n\n```\ncmpl   $0x7,0x8(%rsp) # 将 M(rsp + 8) 看作32位无符号数跟7比较\nja     400fad <phase_3+0x6a> # 如果大于就跳转至 0x400fad (炸弹炸了)\n```\n\n 发现如果输入的第一个数大于7就爆炸了，看来switch最多只有7个case\n\n```\njmpq   *0x402470(,%rax,8) \n# 跳转至 (eax * 8 + 0x402470)处所存的地址 （jumptable）\n```\n\n> 最关键的是这一句，构造了一个 switch 的 jumptable，我们知道地址是 0x402470，按照 case * 8 + 0x402470 跳转到该地址里面的地址，所以我们用gdb看一下。\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_ae5e359c30ff5ccb9292a7472c39eb19.png></img>\n\n- 我通关选了case 1（它比较特殊，处理它其他内存地址跳转都是按case从小到大顺序的，只有case 1 在最后一个，当然其他也都能过。）\n\n- case 1 跳转到了 0x400fb9 地址\n\n```\nmov    $0x137,%eax \n# eax = 0x137 (311) (不用跳转了，下面就是 0x400fbe)\n```\n\n其将eax置为了0x137，要小心是16进制，所以对应十进制311\n\n```\ncmp    0xc(%rsp),%eax # 比较 M(rsp + 12) 和 eax\nje     400fc9 <phase_3+0x86> # 如果相等就跳转至 0x400fc9 (过关了！)\n```\n\n最后是一个比较，如果eax和第二个输入值相同就过了。\n\n- 本题答案（不唯一)\n\n| case | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n| :----: | :----: | :----: | :----: | :----: | :----: | :----: | :----: | :----: |\n| ans | 207 | 311 | 707 | 256 | 389 | 206 | 682 | 327 |\n\n\n***\n\n## Phase 4 - 递归\n### 分析\n- 这题是个递归，不过不用很深，很快就能看出答案。\n\n先正常读两个数，放在rdx，rcx中，检查输入。\n\n```\ncmpl   $0xe,0x8(%rsp) \n# 比较 M(rsp + 8) (既 rdx) 与 0xe\njbe    40103a <phase_4+0x2e> \n# 如果 rdx <= 0xe (14) 跳转至 0x40103a, 不然就炸了 (作为无符号数)\n```\n\n> 这两行汇编告诉我们，rdx一定要小于 0xe (14) 且大于等于0, 不然炸了, 大幅度缩小了范围。\n\n> 接下来就进入了函数递归调用，先做点预处理，把edx里面存一个立即数14，然后edi为第一个输入值，esi = 0 进入fun4\n\n```\nmov    $0xe,%edx # edx = 0xe (14)\nmov    $0x0,%esi # esi = 0\nmov    0x8(%rsp),%edi # edi = (第一个输入值)\ncallq  400fce <func4> # 调用func4\n```\n> 先不着急看fun4，先看看最后要怎么过关\n```\ntest   %eax,%eax # eax & eax\njne    401058 <phase_4+0x4c> \n# 如果ZF == 0 就跳转（既eax != 0)，跳转至 0x401058 炸了\ncmpl   $0x0,0xc(%rsp) # 比较 M(rsp + 12) 和 0\nje     40105d <phase_4+0x51> # 如果相等就跳转到 0x40105d, 不然就炸了\n```\n- test 实际上就是一个与操作，所以我们知道需要 eax == 0 且 M(rsp + 12) == 0，到这我们发现，第二个条件只要我们一开始输入的第二个参数为0，就能够保证，那么下面我们就要看进入fun4之后如何让返回值 eax == 0\n\n> 再回来看fun4，其分为两部分，一个是递归的主体，一个是判断是否继续递归。一开始先对eax 和 ecx 进行一些操作。\n- 我们发现 eax 和 ecx 的值在第一层递归都被置为14，(esi 为 0)按其操作得到 eax 除2, ecx 逻辑右移 31 位为0, 接着其实就是比较 edi 和 rax, **相当于就是比较第一个参数和常数 7**\n\n```\njle    400ff2 <func4+0x24> # 若ecx <= 就跳转至 0x400ff2\n```\n```\nmov    $0x0,%eax # eax = 0;\ncmp    %edi,%ecx # 比较 ecx 和 edi \njge    401007 <func4+0x39> \n# 若 edi >= ecx 跳转至 0x401007 返回\n```\n\n- 接着是一个跳转, 如果满足我们就跳转至 0x400ff2, 我们发现这里已经满足了我们需要的 eax == 0，而想要结束就得使 edi >= ecx (7), 所以我们发现，对于上下两个跳转条件，只要 edi == ecx == 7 就能一直成立，从而直接达成条件，不用进入递归。\n\n进而我们得到了本题答案：7 0\n\n***\n\n## Phase 5 - 指针\n### 分析\n- 这题我觉得是最好玩的一题，先直接分析如何通关。\n\n```\nmov    $0x40245e,%esi # esi = 0x40245e \n# 待比较的 string (flyers) 从 0x40245e 移动至 esi\n```\n\n- 我们在接近返回时看到了一个非常可疑的内存地址，直接给它打出来。\n\n```\n(gdb) p(char*) 0x40245e\n$4 = 0x40245e \"flyers\"\n```\n\n> 发现是一个可疑字符串 flyers，阅读上下文汇编代码可知，最后是比较字符串是否和指定字符串 \"flyers\" 一致。\n\n- 我们再往上看看要怎么输入\n\n```\ncallq  40131b <string_length> # 比较字符长度是否为6\ncmp    $0x6,%eax # 比较 eax 和 6\n```\n\n发现输入一定要是六个字符 *(于是试了试 flyers 果然不对)*\n\n- 往下看，发现了一个 Loop 循环了6次\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_016df1440f7044a54fb4ced529595b58.png></img>\n\n> 经过仔细阅读后，发现这个居然是遍历六个输入字符，将其 ascii 码低4位取出来作为偏移量 (offset),在一个基地址 （0x4024b0）后面取字符出来组成 flyers.\n\n- 立刻开启 gdb 查看基地址附近的内存\n\n**发现分别对应的偏移量是 9, 15, 14, 5, 6, 7**\n> 直接查 ascii 码，发现对应 ionefg 、IONEFG 或者有一些不是字母的字符也行，只要低四位是正确的就可以。 \n\n**本题答案:**  ionefg (答案不唯一)\n\n***\n\n## Phase 6 - Node结构体\n### 分析\n这题还是比较麻烦的，代码比较长也比较复杂，要耐心读。\n\n- 这题的代码可以大致分为输入检测与处理和一个对结构体的顺序检测.\n> 最开始上来先输入六个数之后有个双循环，外部保证输入的六个数要大于等于1，且小于等于6，内部保证互异。所以总体看来就是输入的六个数就是123456, 现在问题是输入的顺序。\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_7194e52688ff3d696a3b889e2b17d63f.png></img>\n\n这段代码遍历了所有输入并用7减去了输入的每个数，所以最后做出答案要记得反一下。\n\n- 接下来代码比较复杂，外面大循环循环了六次，内部有两个平行的小循环。作用是构造结构体，并在栈帧中将其存放位置按照输入的数的大小计算得出\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_9ea5cd30293a18357af1da93c35e0f59.png></img>\n\n\n> 分析代码，我们先发现一种特殊情况就是当前计算的数为1时（输入为6）edx直接就是给定的地址 0x6032d0, 其余的都按照其大小，在第一个小循环中循环相应次数，给 rdx 在原地址上相应偏移16位。\n\n> 接着下来将其存入栈帧中 rsp + 32 到 rsp + 80 的位置\n\n- 使用 gdb 查看 node\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_f2ecdd05728cbefbba59b068a29fdfdc.png></img>\n\n\n最后我们看如何通关\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png></img>\n\n> 发现通关条件是要求定序，前面node大于后面的节点，根据gdb node节点的值和要求我们得到了 3 4 5 6 1 2 的结果，最后不要忘记这是被7减过之后的结果，原来的输入要还原。所以答案就是 4 3 2 1 6 5\n\n**本题答案:** 4 3 2 1 6 5\n\n***\n\n## Secret Phase- 递归\n### 一、进入方法\n- 输入上面六种答案之后，发现 secret phase 并没有出现，于是开始着手寻找入口。\n\n> 根据最后结果出现的字符顺藤摸瓜找到了 phase_defuse 函数，一看发现其中有一个可疑的 <string_not_equal> 函数以及几个可疑的内存地址,统统用 gdb 打印。\n\n```\n(gdb) p(char*) 0x402619\n$2 = 0x402619 \"%d %d %s\"\n```\n\n```\n(gdb) p(char*) 0x402622\n$3 = 0x402622 \"DrEvil\"\n```\n\n> 发现之前调用过的__isoc99_sscanf@plt 还有隐藏用法，在输入两个数后再输入一个字符串 \"DrEvil\" 就能成功开启secret phase.\n\n- 所以我们在最后一次调用__isoc99_sscanf@plt的 phase 4 输入 7 0 DrEvil, 果然在 phase 6 之后进入了 secret phase。\n\n### 分析\n- 虽然说是隐藏关，但是复杂度和难度比 phase 6 低了不少，和 phase 4 一样是一个递归，但不同的是这次真的需要递归几次，但也不深。只要确定好路线还是比较容易的。\n\n```\ncallq  40149e <read_line> # 读一行\n...\ncallq  400bd0 <strtol@plt> # 调用 strtol@plt\n```\n\n> secret phase上来读了一整行然后调用了一个 strtol，经过阅读strtol的源码，发现它是以10为base将字符串转为一个整型，实际上就是剔除了最后答案中除了数字以外的字符。(所以写上答案数字然后乱输字母也能过 bushi)\n\n```\nlea    -0x1(%rax),%eax \n# eax = (rax) - 1\ncmp    $0x3e8,%eax \n# eax == 0x3e8 ? (即判断返回值与0x3e9)\n```\n\n- 这段代码告诉我们输入的数要小于 1000\n\n```\nmov    $0x6030f0,%edi # edi = 0x6030f0 (36)\ncallq  401204 <fun7> # 调用fun7\n```\n- 将edi置为 0x6030f0 (里面存的是36) 接着开始调用fun7\n\n> 我们先不着急看fun7, 老样子先看过关要求。\n\n```\ncmp    $0x2,%eax # 比较一下 eax 返回是否为2\n```\n\n发现非常简单，只要eax返回值为2就行\n\n- 再来看fun7\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_64ed470376ec6b72dc43690bf9b4ea0e.png></img>\n\n> 一看这个递归是逃不过了，但我们要让eax == 2, 路线其实非常明确，第一次先走 way3 将 eax 弄成1，再走 way1 让eax*2， 最后一层我们让eax == 0 最后返回我们得到的 eax 就等于2\n*（eax = 0 -> 1 -> 2）*\n\n> 关键是一个 edx 和 esi 的比较，edx == rdi, 然后每次改变rdi使其中储存地址中所储存的变量逐步接近 esi 完成递归操作。\n\n根据所存地址(注意/d打出的是10进制)，可以很容易找出递归路径\n\n<img src=https://codimd.s3.shivering-isles.com/demo/uploads/upload_dfddd1801cd10c701dd2753164434977.png style=\"width:65%\"></img>\n\n- 输入22可以正好满足需求\n> **22 <= 36 因而 rdi = (rdi + 8) (存8)，22 > 8 因而 rdi = = (rdi + 16) (存22), 22==22 所以 eax 返回 0 ，返回 1， 返回2，最终过关**\n\n**本题答案:** 22 (可以带非数字字符)\n\n\n\n\n","slug":"ICS_Lab2","published":1,"updated":"2020-11-06T13:52:48.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh6bkz8k0001kopdad4gg70z","content":"<h1 id=\"ICS-Lab2-Bomb\"><a href=\"#ICS-Lab2-Bomb\" class=\"headerlink\" title=\"ICS-Lab2-Bomb\"></a>ICS-Lab2-Bomb</h1><blockquote>\n<p>这个是CS:APP的第二个lab，主要着重于汇编代码的阅读</p>\n</blockquote>\n<hr>\n<h2 id=\"完成截图\"><a href=\"#完成截图\" class=\"headerlink\" title=\"完成截图\"></a>完成截图</h2><p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_244e1f55d2823d58f65eabab9478d7ce.png\"></p>\n<hr>\n<h2 id=\"Phase-1-入门\"><a href=\"#Phase-1-入门\" class=\"headerlink\" title=\"Phase 1 - 入门\"></a>Phase 1 - 入门</h2><h3 id=\"一、分析\"><a href=\"#一、分析\" class=\"headerlink\" title=\"一、分析\"></a>一、分析</h3><blockquote>\n<p>练手入门题，用esi寄存器储存答案地址 (一个立即数)</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">402400</span>,%esi</code></pre>\n<blockquote>\n<p>之后调用了一个 string_not_equal 函数比较输入和答案是否一致，一致就通过了。</p>\n</blockquote>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">401338</span> &lt;<span class=\"hljs-built_in\">string</span>s_not_equal&gt;</code></pre>\n\n<h3 id=\"二、gdb调试\"><a href=\"#二、gdb调试\" class=\"headerlink\" title=\"二、gdb调试\"></a>二、gdb调试</h3><blockquote>\n<p>看一下内存地址里面存了什么，获得flag</p>\n</blockquote>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_4801c7e177c56f6e7299c273d0120988.png\"></p>\n<ul>\n<li><strong>答案</strong>: Border relations with Canada have never been better.</li>\n</ul>\n<hr>\n<h2 id=\"Phase-2-循环\"><a href=\"#Phase-2-循环\" class=\"headerlink\" title=\"Phase 2 - 循环\"></a>Phase 2 - 循环</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>本题是一个do while Loop, 难度不大, 耐心读就行了</p>\n</blockquote>\n<p><strong>关键位置</strong></p>\n<ul>\n<li>信息1 ： 看到 read_six_number 知道输入6个数，再往下看</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1</span>,(%rsp) # 比较栈顶地址所存变量大小是否为<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span> &lt;phase_<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">34</span>&gt; # 如果为<span class=\"hljs-number\">1</span> 跳转至地址 <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">40143</span>a &lt;explode_bomb&gt; # 如果不为<span class=\"hljs-number\">1</span>，直接炸了\n<span class=\"hljs-attribute\">jmp</span>    <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span> &lt;phase_<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">34</span>&gt; # 跳转至地址 <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span></code></pre>\n\n<ul>\n<li>信息2 : 第一个数为1</li>\n</ul>\n<p>下面进入Loop Body</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_27148224f8cf2be48266eaa52f50b2f8.png\"></p>\n<ul>\n<li>信息3 :<br>可以看到这个循环把前一个数乘了2，跟后一个数比较, 如果相等就能够继续，不然就炸了。</li>\n</ul>\n<blockquote>\n<p>综上也就是说这是一个首项为1，公比为2的等比数列，共6项。</p>\n</blockquote>\n<p>所以答案就是 1 2 4 8 16 32</p>\n<hr>\n<h2 id=\"Phase-3-分支\"><a href=\"#Phase-3-分支\" class=\"headerlink\" title=\"Phase 3 - 分支\"></a>Phase 3 - 分支</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>第三题关键点在于用gdb查看一下jumptable</p>\n</blockquote>\n<p> 我们先看一下输入，在输入了两个变量后，esi里放了内存中的一个可疑的东西，我们用gdb看一眼。</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">4025</span>cf,%esi</code></pre>\n\n<pre><code class=\"hljs shell\">(gdb) p(char *) 0x4025cf\n&quot;%d %d&quot;</code></pre>\n\n<p> 发现原来是输入两个整型，再往下看</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">8</span>(%rsp) # 将 M(rsp + <span class=\"hljs-number\">8</span>) 看作<span class=\"hljs-number\">32</span>位无符号数跟<span class=\"hljs-number\">7</span>比较\n<span class=\"hljs-attribute\">ja</span>     <span class=\"hljs-number\">400</span>fad &lt;phase_<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6</span>a&gt; # 如果大于就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>fad (炸弹炸了)</code></pre>\n\n<p> 发现如果输入的第一个数大于7就爆炸了，看来switch最多只有7个case</p>\n<pre><code class=\"hljs angelscript\">jmpq   *<span class=\"hljs-number\">0x402470</span>(,%rax,<span class=\"hljs-number\">8</span>) \n# 跳转至 (eax * <span class=\"hljs-number\">8</span> + <span class=\"hljs-number\">0x402470</span>)处所存的地址 （jumptable）</code></pre>\n\n<blockquote>\n<p>最关键的是这一句，构造了一个 switch 的 jumptable，我们知道地址是 0x402470，按照 case * 8 + 0x402470 跳转到该地址里面的地址，所以我们用gdb看一下。</p>\n</blockquote>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_ae5e359c30ff5ccb9292a7472c39eb19.png\"></p>\n<ul>\n<li><p>我通关选了case 1（它比较特殊，处理它其他内存地址跳转都是按case从小到大顺序的，只有case 1 在最后一个，当然其他也都能过。）</p>\n</li>\n<li><p>case 1 跳转到了 0x400fb9 地址</p>\n</li>\n</ul>\n<pre><code class=\"hljs angelscript\">mov    $<span class=\"hljs-number\">0x137</span>,%eax \n# eax = <span class=\"hljs-number\">0x137</span> (<span class=\"hljs-number\">311</span>) (不用跳转了，下面就是 <span class=\"hljs-number\">0x400fbe</span>)</code></pre>\n\n<p>其将eax置为了0x137，要小心是16进制，所以对应十进制311</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmp</span>    <span class=\"hljs-number\">0</span>xc(%rsp),%eax # 比较 M(rsp + <span class=\"hljs-number\">12</span>) 和 eax\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">400</span>fc<span class=\"hljs-number\">9</span> &lt;phase_<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">86</span>&gt; # 如果相等就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>fc<span class=\"hljs-number\">9</span> (过关了！)</code></pre>\n\n<p>最后是一个比较，如果eax和第二个输入值相同就过了。</p>\n<ul>\n<li>本题答案（不唯一)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">case</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ans</td>\n<td align=\"center\">207</td>\n<td align=\"center\">311</td>\n<td align=\"center\">707</td>\n<td align=\"center\">256</td>\n<td align=\"center\">389</td>\n<td align=\"center\">206</td>\n<td align=\"center\">682</td>\n<td align=\"center\">327</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Phase-4-递归\"><a href=\"#Phase-4-递归\" class=\"headerlink\" title=\"Phase 4 - 递归\"></a>Phase 4 - 递归</h2><h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>这题是个递归，不过不用很深，很快就能看出答案。</li>\n</ul>\n<p>先正常读两个数，放在rdx，rcx中，检查输入。</p>\n<pre><code class=\"hljs angelscript\">cmpl   $<span class=\"hljs-number\">0xe</span>,<span class=\"hljs-number\">0x8</span>(%rsp) \n# 比较 M(rsp + <span class=\"hljs-number\">8</span>) (既 rdx) 与 <span class=\"hljs-number\">0xe</span>\njbe    <span class=\"hljs-number\">40103</span>a &lt;phase_4+<span class=\"hljs-number\">0x2e</span>&gt; \n# 如果 rdx &lt;= <span class=\"hljs-number\">0xe</span> (<span class=\"hljs-number\">14</span>) 跳转至 <span class=\"hljs-number\">0x40103a</span>, 不然就炸了 (作为无符号数)</code></pre>\n\n<blockquote>\n<p>这两行汇编告诉我们，rdx一定要小于 0xe (14) 且大于等于0, 不然炸了, 大幅度缩小了范围。</p>\n</blockquote>\n<blockquote>\n<p>接下来就进入了函数递归调用，先做点预处理，把edx里面存一个立即数14，然后edi为第一个输入值，esi = 0 进入fun4</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>xe,%edx # edx = <span class=\"hljs-number\">0</span>xe (<span class=\"hljs-number\">14</span>)\n<span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,%esi # esi = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">mov</span>    <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">8</span>(%rsp),%edi # edi = (第一个输入值)\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">400</span>fce &lt;func<span class=\"hljs-number\">4</span>&gt; # 调用func<span class=\"hljs-number\">4</span></code></pre>\n<blockquote>\n<p>先不着急看fun4，先看看最后要怎么过关</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">test</span>   %eax,%eax # eax &amp; eax\n<span class=\"hljs-attribute\">jne</span>    <span class=\"hljs-number\">401058</span> &lt;phase_<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">4</span>c&gt; \n<span class=\"hljs-comment\"># 如果ZF == 0 就跳转（既eax != 0)，跳转至 0x401058 炸了</span>\n<span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>xc(%rsp) # 比较 M(rsp + <span class=\"hljs-number\">12</span>) 和 <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">40105</span>d &lt;phase_<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">51</span>&gt; # 如果相等就跳转到 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40105</span>d, 不然就炸了</code></pre>\n<ul>\n<li>test 实际上就是一个与操作，所以我们知道需要 eax == 0 且 M(rsp + 12) == 0，到这我们发现，第二个条件只要我们一开始输入的第二个参数为0，就能够保证，那么下面我们就要看进入fun4之后如何让返回值 eax == 0</li>\n</ul>\n<blockquote>\n<p>再回来看fun4，其分为两部分，一个是递归的主体，一个是判断是否继续递归。一开始先对eax 和 ecx 进行一些操作。</p>\n</blockquote>\n<ul>\n<li>我们发现 eax 和 ecx 的值在第一层递归都被置为14，(esi 为 0)按其操作得到 eax 除2, ecx 逻辑右移 31 位为0, 接着其实就是比较 edi 和 rax, <strong>相当于就是比较第一个参数和常数 7</strong></li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">jle</span>    <span class=\"hljs-number\">400</span>ff<span class=\"hljs-number\">2</span> &lt;func<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">24</span>&gt; # 若ecx &lt;= 就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>ff<span class=\"hljs-number\">2</span></code></pre>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,%eax # eax = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-attribute\">cmp</span>    %edi,%ecx # 比较 ecx 和 edi \n<span class=\"hljs-attribute\">jge</span>    <span class=\"hljs-number\">401007</span> &lt;func<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">39</span>&gt; \n<span class=\"hljs-comment\"># 若 edi &gt;= ecx 跳转至 0x401007 返回</span></code></pre>\n\n<ul>\n<li>接着是一个跳转, 如果满足我们就跳转至 0x400ff2, 我们发现这里已经满足了我们需要的 eax == 0，而想要结束就得使 edi &gt;= ecx (7), 所以我们发现，对于上下两个跳转条件，只要 edi == ecx == 7 就能一直成立，从而直接达成条件，不用进入递归。</li>\n</ul>\n<p>进而我们得到了本题答案：7 0</p>\n<hr>\n<h2 id=\"Phase-5-指针\"><a href=\"#Phase-5-指针\" class=\"headerlink\" title=\"Phase 5 - 指针\"></a>Phase 5 - 指针</h2><h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>这题我觉得是最好玩的一题，先直接分析如何通关。</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40245</span>e,%esi # esi = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40245</span>e \n<span class=\"hljs-comment\"># 待比较的 string (flyers) 从 0x40245e 移动至 esi</span></code></pre>\n\n<ul>\n<li>我们在接近返回时看到了一个非常可疑的内存地址，直接给它打出来。</li>\n</ul>\n<pre><code class=\"hljs lsl\">(gdb) p(char*) <span class=\"hljs-number\">0x40245e</span>\n$<span class=\"hljs-number\">4</span> = <span class=\"hljs-number\">0x40245e</span> <span class=\"hljs-string\">&quot;flyers&quot;</span></code></pre>\n\n<blockquote>\n<p>发现是一个可疑字符串 flyers，阅读上下文汇编代码可知，最后是比较字符串是否和指定字符串 “flyers” 一致。</p>\n</blockquote>\n<ul>\n<li>我们再往上看看要怎么输入</li>\n</ul>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">40131</span>b &lt;<span class=\"hljs-built_in\">string</span>_length&gt; # 比较字符长度是否为<span class=\"hljs-number\">6</span>\ncmp    $<span class=\"hljs-number\">0x6</span>,%eax # 比较 eax 和 <span class=\"hljs-number\">6</span></code></pre>\n\n<p>发现输入一定要是六个字符 <em>(于是试了试 flyers 果然不对)</em></p>\n<ul>\n<li>往下看，发现了一个 Loop 循环了6次</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_016df1440f7044a54fb4ced529595b58.png\"></p>\n<blockquote>\n<p>经过仔细阅读后，发现这个居然是遍历六个输入字符，将其 ascii 码低4位取出来作为偏移量 (offset),在一个基地址 （0x4024b0）后面取字符出来组成 flyers.</p>\n</blockquote>\n<ul>\n<li>立刻开启 gdb 查看基地址附近的内存</li>\n</ul>\n<p><strong>发现分别对应的偏移量是 9, 15, 14, 5, 6, 7</strong></p>\n<blockquote>\n<p>直接查 ascii 码，发现对应 ionefg 、IONEFG 或者有一些不是字母的字符也行，只要低四位是正确的就可以。 </p>\n</blockquote>\n<p><strong>本题答案:</strong>  ionefg (答案不唯一)</p>\n<hr>\n<h2 id=\"Phase-6-Node结构体\"><a href=\"#Phase-6-Node结构体\" class=\"headerlink\" title=\"Phase 6 - Node结构体\"></a>Phase 6 - Node结构体</h2><h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这题还是比较麻烦的，代码比较长也比较复杂，要耐心读。</p>\n<ul>\n<li>这题的代码可以大致分为输入检测与处理和一个对结构体的顺序检测.<blockquote>\n<p>最开始上来先输入六个数之后有个双循环，外部保证输入的六个数要大于等于1，且小于等于6，内部保证互异。所以总体看来就是输入的六个数就是123456, 现在问题是输入的顺序。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_7194e52688ff3d696a3b889e2b17d63f.png\"></p>\n<p>这段代码遍历了所有输入并用7减去了输入的每个数，所以最后做出答案要记得反一下。</p>\n<ul>\n<li>接下来代码比较复杂，外面大循环循环了六次，内部有两个平行的小循环。作用是构造结构体，并在栈帧中将其存放位置按照输入的数的大小计算得出</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_9ea5cd30293a18357af1da93c35e0f59.png\"></p>\n<blockquote>\n<p>分析代码，我们先发现一种特殊情况就是当前计算的数为1时（输入为6）edx直接就是给定的地址 0x6032d0, 其余的都按照其大小，在第一个小循环中循环相应次数，给 rdx 在原地址上相应偏移16位。</p>\n</blockquote>\n<blockquote>\n<p>接着下来将其存入栈帧中 rsp + 32 到 rsp + 80 的位置</p>\n</blockquote>\n<ul>\n<li>使用 gdb 查看 node</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_f2ecdd05728cbefbba59b068a29fdfdc.png\"></p>\n<p>最后我们看如何通关</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png\"></p>\n<blockquote>\n<p>发现通关条件是要求定序，前面node大于后面的节点，根据gdb node节点的值和要求我们得到了 3 4 5 6 1 2 的结果，最后不要忘记这是被7减过之后的结果，原来的输入要还原。所以答案就是 4 3 2 1 6 5</p>\n</blockquote>\n<p><strong>本题答案:</strong> 4 3 2 1 6 5</p>\n<hr>\n<h2 id=\"Secret-Phase-递归\"><a href=\"#Secret-Phase-递归\" class=\"headerlink\" title=\"Secret Phase- 递归\"></a>Secret Phase- 递归</h2><h3 id=\"一、进入方法\"><a href=\"#一、进入方法\" class=\"headerlink\" title=\"一、进入方法\"></a>一、进入方法</h3><ul>\n<li>输入上面六种答案之后，发现 secret phase 并没有出现，于是开始着手寻找入口。</li>\n</ul>\n<blockquote>\n<p>根据最后结果出现的字符顺藤摸瓜找到了 phase_defuse 函数，一看发现其中有一个可疑的 <string_not_equal> 函数以及几个可疑的内存地址,统统用 gdb 打印。</string_not_equal></p>\n</blockquote>\n<pre><code class=\"hljs perl\">(gdb) p(char*) <span class=\"hljs-number\">0x402619</span>\n$2 = <span class=\"hljs-number\">0x402619</span> <span class=\"hljs-string\">&quot;%d %d %s&quot;</span></code></pre>\n\n<pre><code class=\"hljs lsl\">(gdb) p(char*) <span class=\"hljs-number\">0x402622</span>\n$<span class=\"hljs-number\">3</span> = <span class=\"hljs-number\">0x402622</span> <span class=\"hljs-string\">&quot;DrEvil&quot;</span></code></pre>\n\n<blockquote>\n<p>发现之前调用过的__isoc99_sscanf@plt 还有隐藏用法，在输入两个数后再输入一个字符串 “DrEvil” 就能成功开启secret phase.</p>\n</blockquote>\n<ul>\n<li>所以我们在最后一次调用__isoc99_sscanf@plt的 phase 4 输入 7 0 DrEvil, 果然在 phase 6 之后进入了 secret phase。</li>\n</ul>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>虽然说是隐藏关，但是复杂度和难度比 phase 6 低了不少，和 phase 4 一样是一个递归，但不同的是这次真的需要递归几次，但也不深。只要确定好路线还是比较容易的。</li>\n</ul>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">40149</span>e &lt;read_line&gt; # 读一行\n...\ncallq  <span class=\"hljs-number\">400</span>bd0 &lt;<span class=\"hljs-symbol\">strtol@</span>plt&gt; # 调用 <span class=\"hljs-symbol\">strtol@</span>plt</code></pre>\n\n<blockquote>\n<p>secret phase上来读了一整行然后调用了一个 strtol，经过阅读strtol的源码，发现它是以10为base将字符串转为一个整型，实际上就是剔除了最后答案中除了数字以外的字符。(所以写上答案数字然后乱输字母也能过 bushi)</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">lea</span>    -<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1</span>(%rax),%eax \n<span class=\"hljs-comment\"># eax = (rax) - 1</span>\n<span class=\"hljs-attribute\">cmp</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">3</span>e<span class=\"hljs-number\">8</span>,%eax \n<span class=\"hljs-comment\"># eax == 0x3e8 ? (即判断返回值与0x3e9)</span></code></pre>\n\n<ul>\n<li>这段代码告诉我们输入的数要小于 1000</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6030</span>f<span class=\"hljs-number\">0</span>,%edi # edi = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6030</span>f<span class=\"hljs-number\">0</span> (<span class=\"hljs-number\">36</span>)\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">401204</span> &lt;fun<span class=\"hljs-number\">7</span>&gt; # 调用fun<span class=\"hljs-number\">7</span></code></pre>\n<ul>\n<li>将edi置为 0x6030f0 (里面存的是36) 接着开始调用fun7</li>\n</ul>\n<blockquote>\n<p>我们先不着急看fun7, 老样子先看过关要求。</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmp</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2</span>,%eax # 比较一下 eax 返回是否为<span class=\"hljs-number\">2</span></code></pre>\n\n<p>发现非常简单，只要eax返回值为2就行</p>\n<ul>\n<li>再来看fun7</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_64ed470376ec6b72dc43690bf9b4ea0e.png\"></p>\n<blockquote>\n<p>一看这个递归是逃不过了，但我们要让eax == 2, 路线其实非常明确，第一次先走 way3 将 eax 弄成1，再走 way1 让eax*2， 最后一层我们让eax == 0 最后返回我们得到的 eax 就等于2<br><em>（eax = 0 -&gt; 1 -&gt; 2）</em></p>\n</blockquote>\n<blockquote>\n<p>关键是一个 edx 和 esi 的比较，edx == rdi, 然后每次改变rdi使其中储存地址中所储存的变量逐步接近 esi 完成递归操作。</p>\n</blockquote>\n<p>根据所存地址(注意/d打出的是10进制)，可以很容易找出递归路径</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_dfddd1801cd10c701dd2753164434977.png\" style=\"width:65%\"></p>\n<ul>\n<li>输入22可以正好满足需求<blockquote>\n<p><strong>22 &lt;= 36 因而 rdi = (rdi + 8) (存8)，22 &gt; 8 因而 rdi = = (rdi + 16) (存22), 22==22 所以 eax 返回 0 ，返回 1， 返回2，最终过关</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><strong>本题答案:</strong> 22 (可以带非数字字符)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ICS-Lab2-Bomb\"><a href=\"#ICS-Lab2-Bomb\" class=\"headerlink\" title=\"ICS-Lab2-Bomb\"></a>ICS-Lab2-Bomb</h1><blockquote>\n<p>这个是CS:APP的第二个lab，主要着重于汇编代码的阅读</p>\n</blockquote>\n<hr>\n<h2 id=\"完成截图\"><a href=\"#完成截图\" class=\"headerlink\" title=\"完成截图\"></a>完成截图</h2><p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_244e1f55d2823d58f65eabab9478d7ce.png\"></p>\n<hr>\n<h2 id=\"Phase-1-入门\"><a href=\"#Phase-1-入门\" class=\"headerlink\" title=\"Phase 1 - 入门\"></a>Phase 1 - 入门</h2><h3 id=\"一、分析\"><a href=\"#一、分析\" class=\"headerlink\" title=\"一、分析\"></a>一、分析</h3><blockquote>\n<p>练手入门题，用esi寄存器储存答案地址 (一个立即数)</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">402400</span>,%esi</code></pre>\n<blockquote>\n<p>之后调用了一个 string_not_equal 函数比较输入和答案是否一致，一致就通过了。</p>\n</blockquote>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">401338</span> &lt;<span class=\"hljs-built_in\">string</span>s_not_equal&gt;</code></pre>\n\n<h3 id=\"二、gdb调试\"><a href=\"#二、gdb调试\" class=\"headerlink\" title=\"二、gdb调试\"></a>二、gdb调试</h3><blockquote>\n<p>看一下内存地址里面存了什么，获得flag</p>\n</blockquote>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_4801c7e177c56f6e7299c273d0120988.png\"></p>\n<ul>\n<li><strong>答案</strong>: Border relations with Canada have never been better.</li>\n</ul>\n<hr>\n<h2 id=\"Phase-2-循环\"><a href=\"#Phase-2-循环\" class=\"headerlink\" title=\"Phase 2 - 循环\"></a>Phase 2 - 循环</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>本题是一个do while Loop, 难度不大, 耐心读就行了</p>\n</blockquote>\n<p><strong>关键位置</strong></p>\n<ul>\n<li>信息1 ： 看到 read_six_number 知道输入6个数，再往下看</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1</span>,(%rsp) # 比较栈顶地址所存变量大小是否为<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span> &lt;phase_<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">34</span>&gt; # 如果为<span class=\"hljs-number\">1</span> 跳转至地址 <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">40143</span>a &lt;explode_bomb&gt; # 如果不为<span class=\"hljs-number\">1</span>，直接炸了\n<span class=\"hljs-attribute\">jmp</span>    <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span> &lt;phase_<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">34</span>&gt; # 跳转至地址 <span class=\"hljs-number\">400</span>f<span class=\"hljs-number\">30</span></code></pre>\n\n<ul>\n<li>信息2 : 第一个数为1</li>\n</ul>\n<p>下面进入Loop Body</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_27148224f8cf2be48266eaa52f50b2f8.png\"></p>\n<ul>\n<li>信息3 :<br>可以看到这个循环把前一个数乘了2，跟后一个数比较, 如果相等就能够继续，不然就炸了。</li>\n</ul>\n<blockquote>\n<p>综上也就是说这是一个首项为1，公比为2的等比数列，共6项。</p>\n</blockquote>\n<p>所以答案就是 1 2 4 8 16 32</p>\n<hr>\n<h2 id=\"Phase-3-分支\"><a href=\"#Phase-3-分支\" class=\"headerlink\" title=\"Phase 3 - 分支\"></a>Phase 3 - 分支</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>第三题关键点在于用gdb查看一下jumptable</p>\n</blockquote>\n<p> 我们先看一下输入，在输入了两个变量后，esi里放了内存中的一个可疑的东西，我们用gdb看一眼。</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">4025</span>cf,%esi</code></pre>\n\n<pre><code class=\"hljs shell\">(gdb) p(char *) 0x4025cf\n&quot;%d %d&quot;</code></pre>\n\n<p> 发现原来是输入两个整型，再往下看</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">8</span>(%rsp) # 将 M(rsp + <span class=\"hljs-number\">8</span>) 看作<span class=\"hljs-number\">32</span>位无符号数跟<span class=\"hljs-number\">7</span>比较\n<span class=\"hljs-attribute\">ja</span>     <span class=\"hljs-number\">400</span>fad &lt;phase_<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6</span>a&gt; # 如果大于就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>fad (炸弹炸了)</code></pre>\n\n<p> 发现如果输入的第一个数大于7就爆炸了，看来switch最多只有7个case</p>\n<pre><code class=\"hljs angelscript\">jmpq   *<span class=\"hljs-number\">0x402470</span>(,%rax,<span class=\"hljs-number\">8</span>) \n# 跳转至 (eax * <span class=\"hljs-number\">8</span> + <span class=\"hljs-number\">0x402470</span>)处所存的地址 （jumptable）</code></pre>\n\n<blockquote>\n<p>最关键的是这一句，构造了一个 switch 的 jumptable，我们知道地址是 0x402470，按照 case * 8 + 0x402470 跳转到该地址里面的地址，所以我们用gdb看一下。</p>\n</blockquote>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_ae5e359c30ff5ccb9292a7472c39eb19.png\"></p>\n<ul>\n<li><p>我通关选了case 1（它比较特殊，处理它其他内存地址跳转都是按case从小到大顺序的，只有case 1 在最后一个，当然其他也都能过。）</p>\n</li>\n<li><p>case 1 跳转到了 0x400fb9 地址</p>\n</li>\n</ul>\n<pre><code class=\"hljs angelscript\">mov    $<span class=\"hljs-number\">0x137</span>,%eax \n# eax = <span class=\"hljs-number\">0x137</span> (<span class=\"hljs-number\">311</span>) (不用跳转了，下面就是 <span class=\"hljs-number\">0x400fbe</span>)</code></pre>\n\n<p>其将eax置为了0x137，要小心是16进制，所以对应十进制311</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmp</span>    <span class=\"hljs-number\">0</span>xc(%rsp),%eax # 比较 M(rsp + <span class=\"hljs-number\">12</span>) 和 eax\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">400</span>fc<span class=\"hljs-number\">9</span> &lt;phase_<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">86</span>&gt; # 如果相等就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>fc<span class=\"hljs-number\">9</span> (过关了！)</code></pre>\n\n<p>最后是一个比较，如果eax和第二个输入值相同就过了。</p>\n<ul>\n<li>本题答案（不唯一)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">case</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ans</td>\n<td align=\"center\">207</td>\n<td align=\"center\">311</td>\n<td align=\"center\">707</td>\n<td align=\"center\">256</td>\n<td align=\"center\">389</td>\n<td align=\"center\">206</td>\n<td align=\"center\">682</td>\n<td align=\"center\">327</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Phase-4-递归\"><a href=\"#Phase-4-递归\" class=\"headerlink\" title=\"Phase 4 - 递归\"></a>Phase 4 - 递归</h2><h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>这题是个递归，不过不用很深，很快就能看出答案。</li>\n</ul>\n<p>先正常读两个数，放在rdx，rcx中，检查输入。</p>\n<pre><code class=\"hljs angelscript\">cmpl   $<span class=\"hljs-number\">0xe</span>,<span class=\"hljs-number\">0x8</span>(%rsp) \n# 比较 M(rsp + <span class=\"hljs-number\">8</span>) (既 rdx) 与 <span class=\"hljs-number\">0xe</span>\njbe    <span class=\"hljs-number\">40103</span>a &lt;phase_4+<span class=\"hljs-number\">0x2e</span>&gt; \n# 如果 rdx &lt;= <span class=\"hljs-number\">0xe</span> (<span class=\"hljs-number\">14</span>) 跳转至 <span class=\"hljs-number\">0x40103a</span>, 不然就炸了 (作为无符号数)</code></pre>\n\n<blockquote>\n<p>这两行汇编告诉我们，rdx一定要小于 0xe (14) 且大于等于0, 不然炸了, 大幅度缩小了范围。</p>\n</blockquote>\n<blockquote>\n<p>接下来就进入了函数递归调用，先做点预处理，把edx里面存一个立即数14，然后edi为第一个输入值，esi = 0 进入fun4</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>xe,%edx # edx = <span class=\"hljs-number\">0</span>xe (<span class=\"hljs-number\">14</span>)\n<span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,%esi # esi = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">mov</span>    <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">8</span>(%rsp),%edi # edi = (第一个输入值)\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">400</span>fce &lt;func<span class=\"hljs-number\">4</span>&gt; # 调用func<span class=\"hljs-number\">4</span></code></pre>\n<blockquote>\n<p>先不着急看fun4，先看看最后要怎么过关</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">test</span>   %eax,%eax # eax &amp; eax\n<span class=\"hljs-attribute\">jne</span>    <span class=\"hljs-number\">401058</span> &lt;phase_<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">4</span>c&gt; \n<span class=\"hljs-comment\"># 如果ZF == 0 就跳转（既eax != 0)，跳转至 0x401058 炸了</span>\n<span class=\"hljs-attribute\">cmpl</span>   $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>xc(%rsp) # 比较 M(rsp + <span class=\"hljs-number\">12</span>) 和 <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">je</span>     <span class=\"hljs-number\">40105</span>d &lt;phase_<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">51</span>&gt; # 如果相等就跳转到 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40105</span>d, 不然就炸了</code></pre>\n<ul>\n<li>test 实际上就是一个与操作，所以我们知道需要 eax == 0 且 M(rsp + 12) == 0，到这我们发现，第二个条件只要我们一开始输入的第二个参数为0，就能够保证，那么下面我们就要看进入fun4之后如何让返回值 eax == 0</li>\n</ul>\n<blockquote>\n<p>再回来看fun4，其分为两部分，一个是递归的主体，一个是判断是否继续递归。一开始先对eax 和 ecx 进行一些操作。</p>\n</blockquote>\n<ul>\n<li>我们发现 eax 和 ecx 的值在第一层递归都被置为14，(esi 为 0)按其操作得到 eax 除2, ecx 逻辑右移 31 位为0, 接着其实就是比较 edi 和 rax, <strong>相当于就是比较第一个参数和常数 7</strong></li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">jle</span>    <span class=\"hljs-number\">400</span>ff<span class=\"hljs-number\">2</span> &lt;func<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">24</span>&gt; # 若ecx &lt;= 就跳转至 <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>ff<span class=\"hljs-number\">2</span></code></pre>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0</span>,%eax # eax = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-attribute\">cmp</span>    %edi,%ecx # 比较 ecx 和 edi \n<span class=\"hljs-attribute\">jge</span>    <span class=\"hljs-number\">401007</span> &lt;func<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">39</span>&gt; \n<span class=\"hljs-comment\"># 若 edi &gt;= ecx 跳转至 0x401007 返回</span></code></pre>\n\n<ul>\n<li>接着是一个跳转, 如果满足我们就跳转至 0x400ff2, 我们发现这里已经满足了我们需要的 eax == 0，而想要结束就得使 edi &gt;= ecx (7), 所以我们发现，对于上下两个跳转条件，只要 edi == ecx == 7 就能一直成立，从而直接达成条件，不用进入递归。</li>\n</ul>\n<p>进而我们得到了本题答案：7 0</p>\n<hr>\n<h2 id=\"Phase-5-指针\"><a href=\"#Phase-5-指针\" class=\"headerlink\" title=\"Phase 5 - 指针\"></a>Phase 5 - 指针</h2><h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>这题我觉得是最好玩的一题，先直接分析如何通关。</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40245</span>e,%esi # esi = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">40245</span>e \n<span class=\"hljs-comment\"># 待比较的 string (flyers) 从 0x40245e 移动至 esi</span></code></pre>\n\n<ul>\n<li>我们在接近返回时看到了一个非常可疑的内存地址，直接给它打出来。</li>\n</ul>\n<pre><code class=\"hljs lsl\">(gdb) p(char*) <span class=\"hljs-number\">0x40245e</span>\n$<span class=\"hljs-number\">4</span> = <span class=\"hljs-number\">0x40245e</span> <span class=\"hljs-string\">&quot;flyers&quot;</span></code></pre>\n\n<blockquote>\n<p>发现是一个可疑字符串 flyers，阅读上下文汇编代码可知，最后是比较字符串是否和指定字符串 “flyers” 一致。</p>\n</blockquote>\n<ul>\n<li>我们再往上看看要怎么输入</li>\n</ul>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">40131</span>b &lt;<span class=\"hljs-built_in\">string</span>_length&gt; # 比较字符长度是否为<span class=\"hljs-number\">6</span>\ncmp    $<span class=\"hljs-number\">0x6</span>,%eax # 比较 eax 和 <span class=\"hljs-number\">6</span></code></pre>\n\n<p>发现输入一定要是六个字符 <em>(于是试了试 flyers 果然不对)</em></p>\n<ul>\n<li>往下看，发现了一个 Loop 循环了6次</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_016df1440f7044a54fb4ced529595b58.png\"></p>\n<blockquote>\n<p>经过仔细阅读后，发现这个居然是遍历六个输入字符，将其 ascii 码低4位取出来作为偏移量 (offset),在一个基地址 （0x4024b0）后面取字符出来组成 flyers.</p>\n</blockquote>\n<ul>\n<li>立刻开启 gdb 查看基地址附近的内存</li>\n</ul>\n<p><strong>发现分别对应的偏移量是 9, 15, 14, 5, 6, 7</strong></p>\n<blockquote>\n<p>直接查 ascii 码，发现对应 ionefg 、IONEFG 或者有一些不是字母的字符也行，只要低四位是正确的就可以。 </p>\n</blockquote>\n<p><strong>本题答案:</strong>  ionefg (答案不唯一)</p>\n<hr>\n<h2 id=\"Phase-6-Node结构体\"><a href=\"#Phase-6-Node结构体\" class=\"headerlink\" title=\"Phase 6 - Node结构体\"></a>Phase 6 - Node结构体</h2><h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这题还是比较麻烦的，代码比较长也比较复杂，要耐心读。</p>\n<ul>\n<li>这题的代码可以大致分为输入检测与处理和一个对结构体的顺序检测.<blockquote>\n<p>最开始上来先输入六个数之后有个双循环，外部保证输入的六个数要大于等于1，且小于等于6，内部保证互异。所以总体看来就是输入的六个数就是123456, 现在问题是输入的顺序。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_7194e52688ff3d696a3b889e2b17d63f.png\"></p>\n<p>这段代码遍历了所有输入并用7减去了输入的每个数，所以最后做出答案要记得反一下。</p>\n<ul>\n<li>接下来代码比较复杂，外面大循环循环了六次，内部有两个平行的小循环。作用是构造结构体，并在栈帧中将其存放位置按照输入的数的大小计算得出</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_9ea5cd30293a18357af1da93c35e0f59.png\"></p>\n<blockquote>\n<p>分析代码，我们先发现一种特殊情况就是当前计算的数为1时（输入为6）edx直接就是给定的地址 0x6032d0, 其余的都按照其大小，在第一个小循环中循环相应次数，给 rdx 在原地址上相应偏移16位。</p>\n</blockquote>\n<blockquote>\n<p>接着下来将其存入栈帧中 rsp + 32 到 rsp + 80 的位置</p>\n</blockquote>\n<ul>\n<li>使用 gdb 查看 node</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_f2ecdd05728cbefbba59b068a29fdfdc.png\"></p>\n<p>最后我们看如何通关</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_a18a67d1b4dbfa16a7fd8800e3ee304b.png\"></p>\n<blockquote>\n<p>发现通关条件是要求定序，前面node大于后面的节点，根据gdb node节点的值和要求我们得到了 3 4 5 6 1 2 的结果，最后不要忘记这是被7减过之后的结果，原来的输入要还原。所以答案就是 4 3 2 1 6 5</p>\n</blockquote>\n<p><strong>本题答案:</strong> 4 3 2 1 6 5</p>\n<hr>\n<h2 id=\"Secret-Phase-递归\"><a href=\"#Secret-Phase-递归\" class=\"headerlink\" title=\"Secret Phase- 递归\"></a>Secret Phase- 递归</h2><h3 id=\"一、进入方法\"><a href=\"#一、进入方法\" class=\"headerlink\" title=\"一、进入方法\"></a>一、进入方法</h3><ul>\n<li>输入上面六种答案之后，发现 secret phase 并没有出现，于是开始着手寻找入口。</li>\n</ul>\n<blockquote>\n<p>根据最后结果出现的字符顺藤摸瓜找到了 phase_defuse 函数，一看发现其中有一个可疑的 <string_not_equal> 函数以及几个可疑的内存地址,统统用 gdb 打印。</string_not_equal></p>\n</blockquote>\n<pre><code class=\"hljs perl\">(gdb) p(char*) <span class=\"hljs-number\">0x402619</span>\n$2 = <span class=\"hljs-number\">0x402619</span> <span class=\"hljs-string\">&quot;%d %d %s&quot;</span></code></pre>\n\n<pre><code class=\"hljs lsl\">(gdb) p(char*) <span class=\"hljs-number\">0x402622</span>\n$<span class=\"hljs-number\">3</span> = <span class=\"hljs-number\">0x402622</span> <span class=\"hljs-string\">&quot;DrEvil&quot;</span></code></pre>\n\n<blockquote>\n<p>发现之前调用过的__isoc99_sscanf@plt 还有隐藏用法，在输入两个数后再输入一个字符串 “DrEvil” 就能成功开启secret phase.</p>\n</blockquote>\n<ul>\n<li>所以我们在最后一次调用__isoc99_sscanf@plt的 phase 4 输入 7 0 DrEvil, 果然在 phase 6 之后进入了 secret phase。</li>\n</ul>\n<h3 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>虽然说是隐藏关，但是复杂度和难度比 phase 6 低了不少，和 phase 4 一样是一个递归，但不同的是这次真的需要递归几次，但也不深。只要确定好路线还是比较容易的。</li>\n</ul>\n<pre><code class=\"hljs angelscript\">callq  <span class=\"hljs-number\">40149</span>e &lt;read_line&gt; # 读一行\n...\ncallq  <span class=\"hljs-number\">400</span>bd0 &lt;<span class=\"hljs-symbol\">strtol@</span>plt&gt; # 调用 <span class=\"hljs-symbol\">strtol@</span>plt</code></pre>\n\n<blockquote>\n<p>secret phase上来读了一整行然后调用了一个 strtol，经过阅读strtol的源码，发现它是以10为base将字符串转为一个整型，实际上就是剔除了最后答案中除了数字以外的字符。(所以写上答案数字然后乱输字母也能过 bushi)</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">lea</span>    -<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1</span>(%rax),%eax \n<span class=\"hljs-comment\"># eax = (rax) - 1</span>\n<span class=\"hljs-attribute\">cmp</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">3</span>e<span class=\"hljs-number\">8</span>,%eax \n<span class=\"hljs-comment\"># eax == 0x3e8 ? (即判断返回值与0x3e9)</span></code></pre>\n\n<ul>\n<li>这段代码告诉我们输入的数要小于 1000</li>\n</ul>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">mov</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6030</span>f<span class=\"hljs-number\">0</span>,%edi # edi = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">6030</span>f<span class=\"hljs-number\">0</span> (<span class=\"hljs-number\">36</span>)\n<span class=\"hljs-attribute\">callq</span>  <span class=\"hljs-number\">401204</span> &lt;fun<span class=\"hljs-number\">7</span>&gt; # 调用fun<span class=\"hljs-number\">7</span></code></pre>\n<ul>\n<li>将edi置为 0x6030f0 (里面存的是36) 接着开始调用fun7</li>\n</ul>\n<blockquote>\n<p>我们先不着急看fun7, 老样子先看过关要求。</p>\n</blockquote>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cmp</span>    $<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2</span>,%eax # 比较一下 eax 返回是否为<span class=\"hljs-number\">2</span></code></pre>\n\n<p>发现非常简单，只要eax返回值为2就行</p>\n<ul>\n<li>再来看fun7</li>\n</ul>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_64ed470376ec6b72dc43690bf9b4ea0e.png\"></p>\n<blockquote>\n<p>一看这个递归是逃不过了，但我们要让eax == 2, 路线其实非常明确，第一次先走 way3 将 eax 弄成1，再走 way1 让eax*2， 最后一层我们让eax == 0 最后返回我们得到的 eax 就等于2<br><em>（eax = 0 -&gt; 1 -&gt; 2）</em></p>\n</blockquote>\n<blockquote>\n<p>关键是一个 edx 和 esi 的比较，edx == rdi, 然后每次改变rdi使其中储存地址中所储存的变量逐步接近 esi 完成递归操作。</p>\n</blockquote>\n<p>根据所存地址(注意/d打出的是10进制)，可以很容易找出递归路径</p>\n<p><img src=\"https://codimd.s3.shivering-isles.com/demo/uploads/upload_dfddd1801cd10c701dd2753164434977.png\" style=\"width:65%\"></p>\n<ul>\n<li>输入22可以正好满足需求<blockquote>\n<p><strong>22 &lt;= 36 因而 rdi = (rdi + 8) (存8)，22 &gt; 8 因而 rdi = = (rdi + 16) (存22), 22==22 所以 eax 返回 0 ，返回 1， 返回2，最终过关</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><strong>本题答案:</strong> 22 (可以带非数字字符)</p>\n"},{"title":"Hello World","index_img":"/img/hello_world/top.png","date":"2020-11-05T02:00:00.000Z","_content":"\n## 第一篇博客用以测试\n\n### 一、 下面是一段C++代码\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    cout << \"Hello World!\" << endl;\n}\n```\n\n### 二、 下面是一段表格\n\n| 0 | 1 | 2 | 3 | 4 | \n| :---: | :---: | :---: | :---: | :---: |\n| x | x | x | x | x |\n\n### 三、 下面是一段 Latex\n\n\n$$E= mc^2$$\n\n\n### 四、下面是一张图片\n\n![](https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRP-ciAYVH8UlH3ZaZC3NkN3ow9CrG36O5crg&usqp=CAU)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: [Hexo, Fluid]\nindex_img: /img/hello_world/top.png\ndate: 2020-11-5 10:00:00\n---\n\n## 第一篇博客用以测试\n\n### 一、 下面是一段C++代码\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    cout << \"Hello World!\" << endl;\n}\n```\n\n### 二、 下面是一段表格\n\n| 0 | 1 | 2 | 3 | 4 | \n| :---: | :---: | :---: | :---: | :---: |\n| x | x | x | x | x |\n\n### 三、 下面是一段 Latex\n\n\n$$E= mc^2$$\n\n\n### 四、下面是一张图片\n\n![](https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRP-ciAYVH8UlH3ZaZC3NkN3ow9CrG36O5crg&usqp=CAU)","slug":"hello-world","published":1,"updated":"2020-11-06T13:52:56.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh6bkz8m0002kopd6vcpafrl","content":"<h2 id=\"第一篇博客用以测试\"><a href=\"#第一篇博客用以测试\" class=\"headerlink\" title=\"第一篇博客用以测试\"></a>第一篇博客用以测试</h2><h3 id=\"一、-下面是一段C-代码\"><a href=\"#一、-下面是一段C-代码\" class=\"headerlink\" title=\"一、 下面是一段C++代码\"></a>一、 下面是一段C++代码</h3><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;Hello World!&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n&#125;</code></pre>\n\n<h3 id=\"二、-下面是一段表格\"><a href=\"#二、-下面是一段表格\" class=\"headerlink\" title=\"二、 下面是一段表格\"></a>二、 下面是一段表格</h3><table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、-下面是一段-Latex\"><a href=\"#三、-下面是一段-Latex\" class=\"headerlink\" title=\"三、 下面是一段 Latex\"></a>三、 下面是一段 Latex</h3><p>$$E= mc^2$$</p>\n<h3 id=\"四、下面是一张图片\"><a href=\"#四、下面是一张图片\" class=\"headerlink\" title=\"四、下面是一张图片\"></a>四、下面是一张图片</h3><p><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRP-ciAYVH8UlH3ZaZC3NkN3ow9CrG36O5crg&usqp=CAU\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一篇博客用以测试\"><a href=\"#第一篇博客用以测试\" class=\"headerlink\" title=\"第一篇博客用以测试\"></a>第一篇博客用以测试</h2><h3 id=\"一、-下面是一段C-代码\"><a href=\"#一、-下面是一段C-代码\" class=\"headerlink\" title=\"一、 下面是一段C++代码\"></a>一、 下面是一段C++代码</h3><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;Hello World!&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n&#125;</code></pre>\n\n<h3 id=\"二、-下面是一段表格\"><a href=\"#二、-下面是一段表格\" class=\"headerlink\" title=\"二、 下面是一段表格\"></a>二、 下面是一段表格</h3><table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n<td align=\"center\">x</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、-下面是一段-Latex\"><a href=\"#三、-下面是一段-Latex\" class=\"headerlink\" title=\"三、 下面是一段 Latex\"></a>三、 下面是一段 Latex</h3><p>$$E= mc^2$$</p>\n<h3 id=\"四、下面是一张图片\"><a href=\"#四、下面是一张图片\" class=\"headerlink\" title=\"四、下面是一张图片\"></a>四、下面是一张图片</h3><p><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRP-ciAYVH8UlH3ZaZC3NkN3ow9CrG36O5crg&usqp=CAU\"></p>\n"},{"title":"ICS-Lab1 位运算","index_img":"/img/ICS_Lab1/top.jpg","date":"2020-11-05T15:58:42.000Z","_content":"\n# ICS_Lab1-位运算\n\n> 这个是CS:APP的第一个lab，也是我ICS课上的第一个lab，主要注重于使用受限制的位运算来完成操作\n\n***\n\n## **Bits.c**\n### **1. bitAnd--与**\n**题目：**\n\n    只用~和|实现&\n\n**样例：**\n\n    bitAnd(6, 5) = 4\n\n**可使用操作：** ~ |\n    \n**最大操作数限制：** 8\n\n**使用操作数：** 4\n\n```cpp\nint bitAnd(int x, int y) {\n  return ~(~x | ~y); //De Morgan's laws\n}\n```\n\n> 应用摩根律 ~(x | y) = ~x & ~y, 可得 x & y = ~(~x | ~y)\n\n***\n\n### **2. getByte--获取字节**\n**题目：**\n\n    从x中提取字节n, n编号从0至3\n\n**样例：**\n\n    getByte(0x12345678,1) = 0x56\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 6\n\n**使用操作数：** 3\n\n**代码：**\n```cpp\nint getByte(int x, int n) {\n  return (x >> (n << 3)) & 0xff;\n}\n```\n\n**分析：**\n\n*由于 1Byte = 8bits = 2^3bits， 所以 n Bytes = 2^3 * n bits*\n> 因而将n左移3位，即 n * 2^3, 再将x右移 n * 2^3 即可将所求字节放在低8位，将其与上0xff，即可取出字节。\n\n***\n\n### **3. logicalShift--逻辑右移**\n**题目：**\n\n    将x逻辑右移n位\n\n**样例：**\n\n    logicalShift(0x87654321,4) = 0x08765432\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 20\n\n**使用操作数：** 10\n\n**代码：**\n```cpp\nint logicalShift(int x, int n) {\n  //flag equals to: if n == 0 return 0; else return 1;\n  int flag = !!n;\n  int mask = ~(flag << (32 + (~n + 1)));\n  return (x >> n) & mask;\n}\n```\n\n**分析：**\n\n* 算数右移\n> 算数右移即在右移后用原符号位数将高位补齐，保持右移后二进制数的符号保持不变。\n\n* 逻辑右移\n> 逻辑右移即在右移后用 0 将高位补齐，是“逻辑上”的右移。\n\n> 在正常右移运算中使用的是算数右移，因而要解决的问题即对于负数如何将最高位补上0，而非符号位1。\n> 我采取掩码的方式，先将x正常右移n位与上其高位的掩码，使其右移产生的高位变为0\n\n* 掩码构造\n> 掩码不能草率的构造为 ~(-1 << (32 - n)), 这种构造方式当n为0时会因-1被左移32位而导致异常，构造出来的mask仍为0\n\n> 由于不能使用if，为判断n是否为0，我才用了一个flag = !n + ~0, 其有很好的性质。当n为0时，flag也为0，而当n不为零时，flag统一为-1，这样使用flag代替原先的-1, 从而避免上述情况。\n\n> 这样我们可以使用 mask = ~(flag << (32 + (~n + 1)))，来构造掩码，当n为0时，flag为0，从而mask = -1，避免上述错误。\n\n***\n\n### **4. bitCount--比特计数**\n**题目：**\n\n    返回二进制数中1的个数\n\n**样例：**\n\n    bitCount(5) = 2, bitCount(7) = 3\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 40\n\n**使用操作数：** 36\n\n**代码：**\n```cpp\nint bitCount(int x) {\n  int tmp, l1, l2, l4, l8, l16; //tmp is used to save ops\n  tmp = (0x55 << 8) + 0x55;\n  l1 = (tmp << 16) + tmp; //0x55555555\n  tmp = (0x33 << 8) + 0x33;\n  l2 = (tmp << 16) + tmp; //0x33333333\n  tmp = (0x0f << 8) + 0x0f;\n  l4 = (tmp << 16) + tmp; //0x0f0f0f0f\n  l8 = (0xff << 16) + 0xff; //0x00ff00ff\n  l16 = (0xff << 8) + 0xff; //0x0000ffff\n\n  x = (x & l1) + ((x >> 1) & l1);\n  x = (x & l2) + ((x >> 2) & l2);\n  x = (x & l4) + ((x >> 4) & l4);\n  x = (x & l8) + ((x >> 8) & l8);\n  x = (x & l16) + ((x >> 16) & l16);\n  return x;\n}\n```\n\n**分析：**\n\n* 分治思想\n> 本题使用了一个简单的分治思想，对于一个二进制数，要对其中为1的位做计数， 对于1位二进制数来说，1的个数无非就是其本身所表示的1或0。利用这个特性，我们可以先将一个二进制数每一位独立分开为相间隔的两部分, 其每位表示的就是自身的二进制个数，再将两串二进制数对其相加，所得到的每两位分隔的二进制数就是表达这个位置的位为1的个数。\n\n> 进一步相加为4位，8位其所代表的含义不变，最后合并至32位二进制数，其所表示的就是原二进制数中所含1的个数。\n\n```cpp\n//以八位二进制数 10101110 为例//\n按 1|0|1|0|1|1|1|0 分割， 为两串1|1|1|1和0|0|1|0，再将其合并，成为 01 | 01 | 10 | 01, 再将两串 01 | 10 和01 | 01合并得 0010 | 0011（这个很容易看出表示左四位有2个1，右四位有3个1），再次合并得 00000101, 得到总共有5个1。\n\n//对于32位二进制数亦按此继续操作即可//\n```\n\n> 于是为完成分割取位的操作，我们需要采用掩码\n\n* 0x55555555 \\ 0x33333333 \\ 0x0f0f0f0f \\ 0x0000ffff\n\n> 利用位运算分别构造，使用tmp可以节约ops, 之后按照分治思想进行操作即可。\n\n***\n\n### **5. bang--逻辑非**\n\n**题目：**\n\n    计算 !x 而不使用逻辑非!\n\n**样例：**\n\n    bang(3) = 0, bang(0) = 1\n\n**可使用操作：** ~ & ^ | + << >>\n    \n**最大操作数限制：** 12\n\n**使用操作数：** 6\n\n**代码：**\n```cpp\nint bang(int x) {\n  return ((x >> 31) | ((~x + 1) >> 31)) + 1;\n}\n```\n\n**分析：**\n\n* 逻辑非\n> 对于逻辑非运算，应该都很熟悉，!x 当且仅当x为0时其为1，其余时候都为0，可以用来区分零和非零数。\n\n> 该问题的关键就是在于如何区分零和非零数，我们知道零的二补码仍然是零，而对于其余非零数，其符号位会有相应改变，利用这一性质，我们可以对零和非零数做出区分。\n\n> 使用 ```((x >> 31) | ((~x + 1) >> 31))```，将二进制数x的符号位与其补码左移31位相与，如若是非零数，其中符号位至少有一个为1，所以经过31位的算数右移后，其中一项必为-1，一项为0，相与之后得到-1,。而对于0来说，结果始终为0。\n\n> 最后只要将结果+1，就能得到逻辑非的效果。\n\n***\n\n### **6. tmin--最小数**\n\n**题目：**\n\n    返回二补码中最小的数\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 4\n\n**使用操作数：** 1\n\n**代码：**\n```cpp\nint tmin(void) {\n  return 1 << 31;\n}\n```\n\n**分析：**\n\n> 此题非常简单，我们知道计算机中负数是用其补码表示的，int所能表示的最小数为0x80000000(-2^31), 即符号位为1，其余皆为0，所以只要将1左移31位即可。\n\n***\n\n### **7. fitsBits--填充比特**\n\n**题目：**\n\n    返回1如果x可以表示为n位二补码，反之返回0 (1 <= n <= 32)\n\n**样例：**\n\n    fitsBits(5,3) = 0, fitsBits(-4,3) = 1\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 15\n\n**使用操作数：** 7\n\n**代码：**\n```cpp\nint fitsBits(int x, int n) {\n  int k = x >> (n + ~0); // if can k = 0 or -1\n  return !k | !(k + 1);\n}\n```\n\n**分析：**\n\n> 我们知道如若一个数能够被n位二进制数表示，则其第n位即最高位是符号位，那么将其右移n-1位后，根据算术右移，其得到的结果不是0，就是1。否则表示，其还有高于n位的位数， 即不能用n位表示。\n\n> 所以用 k = x >> (n + ~0) 表示将其右移n-1位，再用 !k | !(k + 1) 判断k是否为0或-1\n\n***\n\n### **8. divpwr2--除以2的n次方**\n\n**题目：**\n\n    计算 x/(2^n), (0 <= n <= 30)\n\n**样例：**\n\n    divpwr2(15,1) = 7, divpwr2(-33,4) = -2\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 15\n\n**使用操作数：** 7\n\n**代码：**\n```cpp\nint divpwr2(int x, int n) {\n    int sign = x >> 31;\n    int bias = (1 << n) + ~0;\n    x = x + (bias & sign);\n    return x >> n;\n}\n```\n\n**分析：**\n\n> 本题的难点在于Round toward zero, 我们知道除以2的n次方即为将x右移n位。对于正数，尾数截断，因而自然向0舍入。而对于负数则不是如此，经试验在gcc上对于负数，其是向偶数舍入的，因而我们要对负数进行操作。\n\n> 同时由于其向偶数舍入，我们不能简单地对负数进行+1操作，例如原本正确的 -7/4 = -1.25 = -1，但是经过+1操作后变为-6/4 = -1.5 Round toward even则变为了2。所以我们不应简单加一，而是加一个偏差值，其为2^n - 1，对于-7/4来说，就是3，加上bias之后得到(-7 + 3)/4即为-1。\n\n> 所以我们构造bias = (1 << n) + ~0 (由于不能用减号，-1用+~0表示)，然后我们要记得将sign取出，在x进行加操作时先检查一下x是否是负数，再进行操作。最后只要方向的将x右移n位即可。\n\n\n***\n\n### **9. negate--取负**\n\n**题目：**\n\n    返回-x\n\n**样例：**\n\n    negate(1) = -1.\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 5\n\n**使用操作数：** 2\n\n**代码：**\n```cpp\nint negate(int x) {\n  return ~x + 1;\n}\n```\n\n**分析：**\n\n> 很简单，对于有符号二进制数取负就是取其补码，而补码等于其取反加一，返回取反加一即可。\n\n***\n\n### **10. isPositive--是正数**\n\n**题目：**\n\n    返回1如果x大于0，反之返回0\n\n**样例：**\n\n    isPositive(-1) = 0.\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 8\n\n**使用操作数：** 5\n\n**代码：**\n```cpp\nint isPositive(int x) {\n  return !(x >> 31) & !!x;\n}\n```\n\n**分析：**\n> 这题关键在于把0剔除了，区分正负数就是区分其符号位，将x右移31位，负数得-1，正数为0，用一个逻辑非使正数为1，负数为0，然后再和!!x与一下就能剔除0\n\n* !!x 当 x == 0 时返回 0，不为 0 时返回 1\n\n***\n\n### **11. isLessOrEqual--小于等于**\n\n**题目：**\n\n    如果x小于等于y返回1，反之返回0\n\n**样例：**\n\n    isLessOrEqual(4,5) = 1.\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 24\n\n**使用操作数：** 14\n\n**代码：**\n```cpp\nint isLessOrEqual(int x, int y) {\n  int res = y + (~x + 1); // y - x\n  int xSign = x >> 31;\n  int ySign = y >> 31;\n  int dif = ~xSign + ySign;\n  return (~(dif + 1 >> 31) & !(res >> 31)) | !dif;\n}\n```\n\n**分析：**\n> 我在这里采取了作差的方法 res = y + (~x + 1)，即计算一下y-x，判断其是否非负，同时也要考虑溢出问题，即 x 为负数，y为正数，y-x后溢出为负。\n\n> 我将x,y右移31位代表其符号，若负则为-1，若正为0。我同时构造了一个 dif 以表示x,y符号之间的关系。\n\n> **dif = ~xSign + ySign**\n1.  当 x < 0 && y < 0 时，dif = -1 \n2.  当 x < 0 && y > 0 时，dif = 0 \n3.  当 x > 0 && y < 0 时，dif = -2 \n4.  当 x > 0 && y < 0 时，dif = -1\n\n> 将 x,y 符号之间的关系表达出来，把 dif 加一我们可以观察到当 x,y 同号时，dif为0，所以将其取反和 !(res >> 31) 相与，就可以表示同号不溢出的情况，而当 x < 0, y > 0 的情况发生时，我们注意到 dif 就是 0 ，所以我们直接或上 !dif 即可表达这种情况。\n\n***\n\n### **12. ilog2--以2为底的对数**\n\n**题目：**\n\n    返回x取以2为底的对数并向下取整，输入的 x > 0\n\n**样例：**\n\n    ilog2(16) = 4\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 90\n\n**使用操作数：** 48\n\n**代码：**\n\n```cpp\nint ilog2(int x) {\n  int tmp, l1, l2, l4, l8, l16;\n  x |= x >> 1;\n  x |= x >> 2;\n  x |= x >> 4;\n  x |= x >> 8;\n  x |= x >> 16;\n  \n  tmp = (0x55 << 8) + 0x55;\n  l1 = (tmp << 16) + tmp;\n  tmp = (0x33 << 8) + 0x33;\n  l2 = (tmp << 16) + tmp;\n  tmp = (0x0f << 8) + 0x0f;\n  l4 = (tmp << 16) + tmp;\n  l8 = (0xff << 16) + 0xff;\n  l16 = (0xff << 8) + 0xff;\n\n  x = (x & l1) + ((x >> 1) & l1);\n  x = (x & l2) + ((x >> 2) & l2);\n  x = (x & l4) + ((x >> 4) & l4);\n  x = (x & l8) + ((x >> 8) & l8);\n  x = (x & l16) + ((x >> 16) & l16);\n  return x + ~0;\n```\n\n**分析：**\n\n> 我们知道二进制数每位有其位权，所以对 x 取以2为底的对数就是指其为1的最高位的位权。为了获得最高位的位置，其实我们可以将其最高位往下全部变为1，再类似bitsCount数其中1的个数就行了。\n\n> 我把 x 移位相与，保证最高位往下所有数字为1，再使用bitsCount就得到答案。\n\n> 最后不要忘记减一\n\n\n***\n\n### **13. float_neg--浮点数的负数**\n\n**题目：**\n\n    返回-f，当NaN时，返回参数f\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 10\n\n**使用操作数：** 5\n\n**代码：**\n```cpp\nunsigned float_neg(unsigned uf) {\n  unsigned exp = uf & 0x7f800000;\n  unsigned frac = uf & 0x007fffff;\n  if(exp == 0x7f800000 && frac)\n    return uf;\n  return uf ^= 0x80000000;\n}\n```\n\n**分析：**\n* IEEE-float\n> 我们知道IEEE单精度浮点数，最高位为符号位，其后8位为阶码exp，后23位为尾数frac。其牺牲了精度来扩大了表达范围。\n\n> 而当 exp 全 1 时，如若frac非全零，则表示NaN。若全零，则表示无穷大/小。\n\n> 这里我们只要将原数和符号位0x80000000异或一下，即可取负。不要忘记排除NaN的情况。\n\n***\n\n### **14. float_i2f--int转float**\n\n**题目：**\n\n    把int类型的数转换为float表示(比特形式)\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 30\n\n**代码：**\n\n```cpp\nunsigned float_i2f(int x) {\n  unsigned frac, mask1, mask2, mask3, mask4, d;\n  int high = 0x80000000;\n  unsigned sign = x & 0x80000000;\n  unsigned exp = 127;\n  int count = 32, i;\n  if(sign)\n    x = ~x + 1;\n  else if(!x)\n    return x;\n  \n  frac = x;\n\n  for(;high; high >>= 1)\n  {\n    --count;\n    if(high & x)\n      break;\n  }\n  i = count - 23;\n  mask1 = ~(1 << count); // the highest 1\n  mask2 = 1 << i; //the lowest of remain frac;\n  mask3 = mask2 >> 1; // the highest of deserted bits \n  mask4 = mask2 - 1; // the deserted bits\n  exp += count;\n\n  frac &= mask1;\n  \n  if(i > 0)\n  {\n    d = frac & mask4; // deserted bits\n    if(d > mask3 | (d == mask3 && frac & mask2))\n    {\n      frac += mask2;\n      if(frac > 0x3fffffff)\n      {\n        frac = 0;\n        exp++;\n      }\n    }\n    frac >>= i;\n  }\n  else\n    frac <<= -i;\n\n  return sign | exp << 23 | frac;\n}\n```\n\n**分析：**\n\n> 我认为这题比较难，我做了很久很久....它难在浮点数向偶数舍入以及其操作数的限制。\n\n> 我们知道由于浮点数表示范围比整型大，我们可以将整型转换为浮点数，但是相应的会有一些精度的丢失，因为尾数frac只有23位，而int有31位可用。\n\n> 所以其关键在于int的位数，一开始先把该取出来的都用掩码取出来，把负数和零处理一下。之后我利用了一个循环先找出int的最高位在哪，利用count计数。\n\n> 后面我采取了四个掩码，分别代表最高位的1，留下的尾数中的最低位，要舍去的位数的最高位，以及舍弃的位数的掩码。利用这四个掩码我们可以达到存frac时，将其向**偶数舍入**。\n\n> 具体操作是，先取出丢弃的尾数，将其存放在d中，看其有没有超过0.5 (即 d 是否大于 mask3) 如果大于，直接frac++就行。而如果等于的话，还要看frac是否是奇数 (即frac & mask2是否为1) 如果是，则要向偶数舍入,frac++。\n\n> 加完frac之后还要注意**溢出问题**，如果溢出了，要将frac置0，然后把阶码 exp++，再按照之前输出来的尾数移动，将尾数对齐即可 （位数最高默认为1不存，因而把最高位隐去）。\n\n> 最后把符号位，阶码位和尾数位拼接，得到最后的结果。\n\n***\n\n### 15. float_twice--float * 2\n\n**题目：**\n\n    返回float * 2, 当参数是NaN时，返回参数\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 20\n\n**代码：**\n```cpp\nunsigned float_twice(unsigned uf) {\n  unsigned sign = uf & 0x80000000;\n  unsigned exp = uf & 0x7f800000;\n  unsigned frac = uf & 0x007fffff;\n  if(exp == 0x7f800000) //NaN & inf\n    return uf;\n  if(!exp && !frac) // 0\n    return uf;\n  if(!exp && frac <= 0x3fffff)  // low\n    frac *= 2;\n  else if(!exp && frac > 0x3fffff) // high\n  {\n    exp += 0x00800000;\n    frac = (frac * 2) & 0x7fffff;\n  }\n  else // normal\n    exp += 0x00800000;\n  return sign + exp + frac;\n}\n```\n\n**分析：**\n> 主要要分析的地方，在于当阶码exp为0时，是否在乘2之后进位。所以要考虑尾数是否大于0x3fffff，如果小于等于之，则直接尾数乘2就行，不会溢出，否则则exp要进位，同时尾数乘2之后要与上0x7fffff保证不溢出。\n\n> 其他正常情况直接exp++就行，注意一下特殊情况;\n\n*本题中测试集中有一个inf，也要直接返回参数uf*\n\n***\n\n## **Bits_honor.c**\n### **1. bitReverse--比特翻转**\n\n**题目：**\n\n    把32比特int的比特位翻转\n\n**样例：**\n\n    bitReverse(0x80000004) = 0x20000001\n    bitReverse(0x7FFFFFFF) = 0xFFFFFFFE\n    \n**最大操作数限制：** 40\n\n**使用操作数：** 40\n\n**代码：**\n```cpp\nint bitReverse(int x)\n{\n   int tmp,l1, l2, l4, l8, l16;\n\n   tmp = (0x55 << 8) + 0x55;\n   l1 = (tmp << 16) + tmp;\n   tmp = (0x33 << 8) + 0x33;\n   l2 = (tmp << 16) + tmp;\n   tmp = (0x0f << 8) + 0x0f;\n   l4 = (tmp << 16) + tmp;\n   l8 = (0xff << 16) + 0xff;\n   l16 = (0xff << 8) + 0xff;\n\n   x = ((x >> 16) & l16) | (x << 16);\n   x = ((x >> 8) & l8) | ((x & l8) << 8);\n   x = ((x >> 4) & l4) | ((x & l4) << 4);\n   x = ((x >> 2) & l2) | ((x & l2) << 2);\n   x = ((x >> 1) & l1) | ((x & l1) << 1);\n   return x;\n}\n```\n\n**分析：**\n\n> 这题和 bitsCount 有异曲同工之妙，也是一个分治法，将32位二进制数一分为二，交换，再将内部各自再一分为二，交换，直至最底层2位二进制数互换位置，最后完成了将所有位数翻转的工作。\n\n> 但值得注意的是，给出的是有符号的int，所以在右移交换位置时，会发生因为负数算术右移导致高位全是1的情况，致使在与的过程中高位全部变为1。这边只要将其移动后在和掩码相与就能解决这一问题。而对于低位，先与掩码相与再移动，可以省去取反得到高位掩码的操作数。再用tmp省一下操作数。\n\n> 最后操作数正好卡在40\n\n***\n\n### **2. mod3--取模3**\n\n**题目：**\n\n    计算 x 取模 3，而不用%\n\n**样例：**\n\n    mod3(100) = 1\n    mod3(-100) = -1\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 90\n\n**使用操作数：** 24\n\n**代码：**\n```cpp\nint mod3(int x)\n{\n   int mask = (0xff << 8) + 0xff;\n\n   x = (x >> 16) + (x & mask); // sum base 4^8 digits (a <= 0x1FFFE)\n   x = (x >> 8) + (x & 0xff); // sum base 4^4 digits (a <= 0x2FD)\n   x = (x >> 4) + (x & 0xf); // sum base 4^2 digits (a <= 0x3C)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x1D)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x9)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x4)\n\n   x = (((x + 1) >> 2) + x) & 0x3;\n   return x;\n}\n```\n\n**分析：**\n\n> 这题难度算是比较大的，我参考了一些资料最后才写出这个代码。其实这题也与bitsCount有着一定的联系。\n\n> 对于解这题有一个根本的公式即 \n    \n    a % m = ((b % m)(a/b) + (a % b)) % m\n    其中b是进制数\n\n> 我们知道，如果想要知道一个十进制的数能否被三整除，只要看它所有数位之和是否能被三整除就行了。其实这就是上述公式的特殊情况，由于10 mod 3 == 1 所以其就退化为\n\n    a mod m = (a/b + a % b) % m\n    递归下来就是所有数位之和\n\n> 而对于二进制的情况，我们可以将进制位b选为4，这样正好是两位二进制数，同时4 % 3 == 1，这样一来，对于二进制数中我们只需要统计所有两两数位(四进制)的和能否被三整除就行了。\n\n> 而考虑到我们每做一次 a/b + a % b 统计数位和都减小了数的规模，这样只要做有限次就能够将数控制在<=3的范围内。\n\n> 对于a % 4，这是一个经典的trivial情况，我们只需要做 a & 3，就能够轻松得到a % 4的值。而对于a/4，只需要做a >> 2即可。\n\n> 对于二进制数我们不仅可以按两位两位的四进制数位和来数，也可以直接数其倍数(4^i)，从最大4^8开始统计，一步步减小x的值，最后将x做到<= 3的范围\n\n> 最后要判断x是否为3，如果为3的话则要置为0，我利用3数位全为1的特点，将其+1进位后，右移2位。如果为3，则得到的是1。将其再加上x，如若x是1或2，则还是不变，但如果是3，它又会进位到4，那么我们只要再与上0x3，则会得到0，即为想要的结果。\n\n\n***\n\n### **3. float_f2i--float转int**\n\n**题目：**\n\n    输入一个按二进制位储存的float（以unsigned表示），将其转为int输出。(NaN,inf，溢出直接返回参数)\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 17\n\n**代码：**\n```cpp\nint float_f2i(unsigned uf)\n{\n   int sign, exp, frac, res;\n   unsigned int tmp;\n\n   if(!uf)\n      return 0;\n   sign = uf & 0x80000000;\n   exp = uf & 0x7f800000;\n   frac = (uf & 0x007fffff) | 0x00800000;\n\n   if(exp == 0x7f800000) //NaN and inf\n      return 0x80000000u;\n\n   exp >>= 23;\n\n   if(exp < 127)\n      return 0;\n   else if(exp > 158)\n      return 0x80000000u;\n   else if(exp > 150)\n      tmp = frac << (exp - 150);\n   else\n      tmp = frac >> (150 - exp);\n\n      \n   if(sign)\n      res = ~tmp + 1;\n   else\n      res = tmp;\n   \n   return res | sign;\n}\n```\n\n**分析：**\n\n> 这题特殊情况比较多，把NaN和inf处理一下，然后注意一下溢出情况，即取出来的exp - bias > 31，肯定超过2^31整型储存的最大值，直接返回0x80000000u，然后对于exp小于127的，其指数是负数，直接返回int值为0。对于在exp - bias 在 0 到 31 之间的，由于frac只有23位，所以要将注意一下讨论23的情况。\n\n> 最后把取出来的符号位对一下，如果负数取反加一，正数直接等，最后再或上符号位，返回答案。\n\n---\n\n## **结果截图**\n### **bits.c**\n\n![bits_btest](/img/ICS_Lab1/bits_btest.JPG)\n\n![bits_dlc](/img/ICS_Lab1/bits_dlc.png)\n\n### **bits_honor.c**\n\n![bits_honor_btest](/img/ICS_Lab1/bits_honor_btest.JPG)\n\n![bits_honor_dlc](/img/ICS_Lab1/bits_honor_dlc.png)\n\n\n\n## 参考\n***\n<https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin>\n<https://blog.csdn.net/jiahonghao2002/article/details/108223366>\n<https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/>\n<http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3>\n<https://www.zhihu.com/question/38206659/answer/763034261>\n<https://blog.csdn.net/xindaxinda123/article/details/95617758>\n<https://www.runoob.com/w3cnote/32-float-storage.html>","source":"_posts/ICS_Lab1.md","raw":"---\ntitle: ICS-Lab1 位运算\nindex_img: /img/ICS_Lab1/top.jpg\ndate: 2020-11-05 23:58:42\ncategory: [ICS]\ntags: [Bits]\n---\n\n# ICS_Lab1-位运算\n\n> 这个是CS:APP的第一个lab，也是我ICS课上的第一个lab，主要注重于使用受限制的位运算来完成操作\n\n***\n\n## **Bits.c**\n### **1. bitAnd--与**\n**题目：**\n\n    只用~和|实现&\n\n**样例：**\n\n    bitAnd(6, 5) = 4\n\n**可使用操作：** ~ |\n    \n**最大操作数限制：** 8\n\n**使用操作数：** 4\n\n```cpp\nint bitAnd(int x, int y) {\n  return ~(~x | ~y); //De Morgan's laws\n}\n```\n\n> 应用摩根律 ~(x | y) = ~x & ~y, 可得 x & y = ~(~x | ~y)\n\n***\n\n### **2. getByte--获取字节**\n**题目：**\n\n    从x中提取字节n, n编号从0至3\n\n**样例：**\n\n    getByte(0x12345678,1) = 0x56\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 6\n\n**使用操作数：** 3\n\n**代码：**\n```cpp\nint getByte(int x, int n) {\n  return (x >> (n << 3)) & 0xff;\n}\n```\n\n**分析：**\n\n*由于 1Byte = 8bits = 2^3bits， 所以 n Bytes = 2^3 * n bits*\n> 因而将n左移3位，即 n * 2^3, 再将x右移 n * 2^3 即可将所求字节放在低8位，将其与上0xff，即可取出字节。\n\n***\n\n### **3. logicalShift--逻辑右移**\n**题目：**\n\n    将x逻辑右移n位\n\n**样例：**\n\n    logicalShift(0x87654321,4) = 0x08765432\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 20\n\n**使用操作数：** 10\n\n**代码：**\n```cpp\nint logicalShift(int x, int n) {\n  //flag equals to: if n == 0 return 0; else return 1;\n  int flag = !!n;\n  int mask = ~(flag << (32 + (~n + 1)));\n  return (x >> n) & mask;\n}\n```\n\n**分析：**\n\n* 算数右移\n> 算数右移即在右移后用原符号位数将高位补齐，保持右移后二进制数的符号保持不变。\n\n* 逻辑右移\n> 逻辑右移即在右移后用 0 将高位补齐，是“逻辑上”的右移。\n\n> 在正常右移运算中使用的是算数右移，因而要解决的问题即对于负数如何将最高位补上0，而非符号位1。\n> 我采取掩码的方式，先将x正常右移n位与上其高位的掩码，使其右移产生的高位变为0\n\n* 掩码构造\n> 掩码不能草率的构造为 ~(-1 << (32 - n)), 这种构造方式当n为0时会因-1被左移32位而导致异常，构造出来的mask仍为0\n\n> 由于不能使用if，为判断n是否为0，我才用了一个flag = !n + ~0, 其有很好的性质。当n为0时，flag也为0，而当n不为零时，flag统一为-1，这样使用flag代替原先的-1, 从而避免上述情况。\n\n> 这样我们可以使用 mask = ~(flag << (32 + (~n + 1)))，来构造掩码，当n为0时，flag为0，从而mask = -1，避免上述错误。\n\n***\n\n### **4. bitCount--比特计数**\n**题目：**\n\n    返回二进制数中1的个数\n\n**样例：**\n\n    bitCount(5) = 2, bitCount(7) = 3\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 40\n\n**使用操作数：** 36\n\n**代码：**\n```cpp\nint bitCount(int x) {\n  int tmp, l1, l2, l4, l8, l16; //tmp is used to save ops\n  tmp = (0x55 << 8) + 0x55;\n  l1 = (tmp << 16) + tmp; //0x55555555\n  tmp = (0x33 << 8) + 0x33;\n  l2 = (tmp << 16) + tmp; //0x33333333\n  tmp = (0x0f << 8) + 0x0f;\n  l4 = (tmp << 16) + tmp; //0x0f0f0f0f\n  l8 = (0xff << 16) + 0xff; //0x00ff00ff\n  l16 = (0xff << 8) + 0xff; //0x0000ffff\n\n  x = (x & l1) + ((x >> 1) & l1);\n  x = (x & l2) + ((x >> 2) & l2);\n  x = (x & l4) + ((x >> 4) & l4);\n  x = (x & l8) + ((x >> 8) & l8);\n  x = (x & l16) + ((x >> 16) & l16);\n  return x;\n}\n```\n\n**分析：**\n\n* 分治思想\n> 本题使用了一个简单的分治思想，对于一个二进制数，要对其中为1的位做计数， 对于1位二进制数来说，1的个数无非就是其本身所表示的1或0。利用这个特性，我们可以先将一个二进制数每一位独立分开为相间隔的两部分, 其每位表示的就是自身的二进制个数，再将两串二进制数对其相加，所得到的每两位分隔的二进制数就是表达这个位置的位为1的个数。\n\n> 进一步相加为4位，8位其所代表的含义不变，最后合并至32位二进制数，其所表示的就是原二进制数中所含1的个数。\n\n```cpp\n//以八位二进制数 10101110 为例//\n按 1|0|1|0|1|1|1|0 分割， 为两串1|1|1|1和0|0|1|0，再将其合并，成为 01 | 01 | 10 | 01, 再将两串 01 | 10 和01 | 01合并得 0010 | 0011（这个很容易看出表示左四位有2个1，右四位有3个1），再次合并得 00000101, 得到总共有5个1。\n\n//对于32位二进制数亦按此继续操作即可//\n```\n\n> 于是为完成分割取位的操作，我们需要采用掩码\n\n* 0x55555555 \\ 0x33333333 \\ 0x0f0f0f0f \\ 0x0000ffff\n\n> 利用位运算分别构造，使用tmp可以节约ops, 之后按照分治思想进行操作即可。\n\n***\n\n### **5. bang--逻辑非**\n\n**题目：**\n\n    计算 !x 而不使用逻辑非!\n\n**样例：**\n\n    bang(3) = 0, bang(0) = 1\n\n**可使用操作：** ~ & ^ | + << >>\n    \n**最大操作数限制：** 12\n\n**使用操作数：** 6\n\n**代码：**\n```cpp\nint bang(int x) {\n  return ((x >> 31) | ((~x + 1) >> 31)) + 1;\n}\n```\n\n**分析：**\n\n* 逻辑非\n> 对于逻辑非运算，应该都很熟悉，!x 当且仅当x为0时其为1，其余时候都为0，可以用来区分零和非零数。\n\n> 该问题的关键就是在于如何区分零和非零数，我们知道零的二补码仍然是零，而对于其余非零数，其符号位会有相应改变，利用这一性质，我们可以对零和非零数做出区分。\n\n> 使用 ```((x >> 31) | ((~x + 1) >> 31))```，将二进制数x的符号位与其补码左移31位相与，如若是非零数，其中符号位至少有一个为1，所以经过31位的算数右移后，其中一项必为-1，一项为0，相与之后得到-1,。而对于0来说，结果始终为0。\n\n> 最后只要将结果+1，就能得到逻辑非的效果。\n\n***\n\n### **6. tmin--最小数**\n\n**题目：**\n\n    返回二补码中最小的数\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 4\n\n**使用操作数：** 1\n\n**代码：**\n```cpp\nint tmin(void) {\n  return 1 << 31;\n}\n```\n\n**分析：**\n\n> 此题非常简单，我们知道计算机中负数是用其补码表示的，int所能表示的最小数为0x80000000(-2^31), 即符号位为1，其余皆为0，所以只要将1左移31位即可。\n\n***\n\n### **7. fitsBits--填充比特**\n\n**题目：**\n\n    返回1如果x可以表示为n位二补码，反之返回0 (1 <= n <= 32)\n\n**样例：**\n\n    fitsBits(5,3) = 0, fitsBits(-4,3) = 1\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 15\n\n**使用操作数：** 7\n\n**代码：**\n```cpp\nint fitsBits(int x, int n) {\n  int k = x >> (n + ~0); // if can k = 0 or -1\n  return !k | !(k + 1);\n}\n```\n\n**分析：**\n\n> 我们知道如若一个数能够被n位二进制数表示，则其第n位即最高位是符号位，那么将其右移n-1位后，根据算术右移，其得到的结果不是0，就是1。否则表示，其还有高于n位的位数， 即不能用n位表示。\n\n> 所以用 k = x >> (n + ~0) 表示将其右移n-1位，再用 !k | !(k + 1) 判断k是否为0或-1\n\n***\n\n### **8. divpwr2--除以2的n次方**\n\n**题目：**\n\n    计算 x/(2^n), (0 <= n <= 30)\n\n**样例：**\n\n    divpwr2(15,1) = 7, divpwr2(-33,4) = -2\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 15\n\n**使用操作数：** 7\n\n**代码：**\n```cpp\nint divpwr2(int x, int n) {\n    int sign = x >> 31;\n    int bias = (1 << n) + ~0;\n    x = x + (bias & sign);\n    return x >> n;\n}\n```\n\n**分析：**\n\n> 本题的难点在于Round toward zero, 我们知道除以2的n次方即为将x右移n位。对于正数，尾数截断，因而自然向0舍入。而对于负数则不是如此，经试验在gcc上对于负数，其是向偶数舍入的，因而我们要对负数进行操作。\n\n> 同时由于其向偶数舍入，我们不能简单地对负数进行+1操作，例如原本正确的 -7/4 = -1.25 = -1，但是经过+1操作后变为-6/4 = -1.5 Round toward even则变为了2。所以我们不应简单加一，而是加一个偏差值，其为2^n - 1，对于-7/4来说，就是3，加上bias之后得到(-7 + 3)/4即为-1。\n\n> 所以我们构造bias = (1 << n) + ~0 (由于不能用减号，-1用+~0表示)，然后我们要记得将sign取出，在x进行加操作时先检查一下x是否是负数，再进行操作。最后只要方向的将x右移n位即可。\n\n\n***\n\n### **9. negate--取负**\n\n**题目：**\n\n    返回-x\n\n**样例：**\n\n    negate(1) = -1.\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 5\n\n**使用操作数：** 2\n\n**代码：**\n```cpp\nint negate(int x) {\n  return ~x + 1;\n}\n```\n\n**分析：**\n\n> 很简单，对于有符号二进制数取负就是取其补码，而补码等于其取反加一，返回取反加一即可。\n\n***\n\n### **10. isPositive--是正数**\n\n**题目：**\n\n    返回1如果x大于0，反之返回0\n\n**样例：**\n\n    isPositive(-1) = 0.\n\n**可使用操作：**  ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 8\n\n**使用操作数：** 5\n\n**代码：**\n```cpp\nint isPositive(int x) {\n  return !(x >> 31) & !!x;\n}\n```\n\n**分析：**\n> 这题关键在于把0剔除了，区分正负数就是区分其符号位，将x右移31位，负数得-1，正数为0，用一个逻辑非使正数为1，负数为0，然后再和!!x与一下就能剔除0\n\n* !!x 当 x == 0 时返回 0，不为 0 时返回 1\n\n***\n\n### **11. isLessOrEqual--小于等于**\n\n**题目：**\n\n    如果x小于等于y返回1，反之返回0\n\n**样例：**\n\n    isLessOrEqual(4,5) = 1.\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 24\n\n**使用操作数：** 14\n\n**代码：**\n```cpp\nint isLessOrEqual(int x, int y) {\n  int res = y + (~x + 1); // y - x\n  int xSign = x >> 31;\n  int ySign = y >> 31;\n  int dif = ~xSign + ySign;\n  return (~(dif + 1 >> 31) & !(res >> 31)) | !dif;\n}\n```\n\n**分析：**\n> 我在这里采取了作差的方法 res = y + (~x + 1)，即计算一下y-x，判断其是否非负，同时也要考虑溢出问题，即 x 为负数，y为正数，y-x后溢出为负。\n\n> 我将x,y右移31位代表其符号，若负则为-1，若正为0。我同时构造了一个 dif 以表示x,y符号之间的关系。\n\n> **dif = ~xSign + ySign**\n1.  当 x < 0 && y < 0 时，dif = -1 \n2.  当 x < 0 && y > 0 时，dif = 0 \n3.  当 x > 0 && y < 0 时，dif = -2 \n4.  当 x > 0 && y < 0 时，dif = -1\n\n> 将 x,y 符号之间的关系表达出来，把 dif 加一我们可以观察到当 x,y 同号时，dif为0，所以将其取反和 !(res >> 31) 相与，就可以表示同号不溢出的情况，而当 x < 0, y > 0 的情况发生时，我们注意到 dif 就是 0 ，所以我们直接或上 !dif 即可表达这种情况。\n\n***\n\n### **12. ilog2--以2为底的对数**\n\n**题目：**\n\n    返回x取以2为底的对数并向下取整，输入的 x > 0\n\n**样例：**\n\n    ilog2(16) = 4\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 90\n\n**使用操作数：** 48\n\n**代码：**\n\n```cpp\nint ilog2(int x) {\n  int tmp, l1, l2, l4, l8, l16;\n  x |= x >> 1;\n  x |= x >> 2;\n  x |= x >> 4;\n  x |= x >> 8;\n  x |= x >> 16;\n  \n  tmp = (0x55 << 8) + 0x55;\n  l1 = (tmp << 16) + tmp;\n  tmp = (0x33 << 8) + 0x33;\n  l2 = (tmp << 16) + tmp;\n  tmp = (0x0f << 8) + 0x0f;\n  l4 = (tmp << 16) + tmp;\n  l8 = (0xff << 16) + 0xff;\n  l16 = (0xff << 8) + 0xff;\n\n  x = (x & l1) + ((x >> 1) & l1);\n  x = (x & l2) + ((x >> 2) & l2);\n  x = (x & l4) + ((x >> 4) & l4);\n  x = (x & l8) + ((x >> 8) & l8);\n  x = (x & l16) + ((x >> 16) & l16);\n  return x + ~0;\n```\n\n**分析：**\n\n> 我们知道二进制数每位有其位权，所以对 x 取以2为底的对数就是指其为1的最高位的位权。为了获得最高位的位置，其实我们可以将其最高位往下全部变为1，再类似bitsCount数其中1的个数就行了。\n\n> 我把 x 移位相与，保证最高位往下所有数字为1，再使用bitsCount就得到答案。\n\n> 最后不要忘记减一\n\n\n***\n\n### **13. float_neg--浮点数的负数**\n\n**题目：**\n\n    返回-f，当NaN时，返回参数f\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 10\n\n**使用操作数：** 5\n\n**代码：**\n```cpp\nunsigned float_neg(unsigned uf) {\n  unsigned exp = uf & 0x7f800000;\n  unsigned frac = uf & 0x007fffff;\n  if(exp == 0x7f800000 && frac)\n    return uf;\n  return uf ^= 0x80000000;\n}\n```\n\n**分析：**\n* IEEE-float\n> 我们知道IEEE单精度浮点数，最高位为符号位，其后8位为阶码exp，后23位为尾数frac。其牺牲了精度来扩大了表达范围。\n\n> 而当 exp 全 1 时，如若frac非全零，则表示NaN。若全零，则表示无穷大/小。\n\n> 这里我们只要将原数和符号位0x80000000异或一下，即可取负。不要忘记排除NaN的情况。\n\n***\n\n### **14. float_i2f--int转float**\n\n**题目：**\n\n    把int类型的数转换为float表示(比特形式)\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 30\n\n**代码：**\n\n```cpp\nunsigned float_i2f(int x) {\n  unsigned frac, mask1, mask2, mask3, mask4, d;\n  int high = 0x80000000;\n  unsigned sign = x & 0x80000000;\n  unsigned exp = 127;\n  int count = 32, i;\n  if(sign)\n    x = ~x + 1;\n  else if(!x)\n    return x;\n  \n  frac = x;\n\n  for(;high; high >>= 1)\n  {\n    --count;\n    if(high & x)\n      break;\n  }\n  i = count - 23;\n  mask1 = ~(1 << count); // the highest 1\n  mask2 = 1 << i; //the lowest of remain frac;\n  mask3 = mask2 >> 1; // the highest of deserted bits \n  mask4 = mask2 - 1; // the deserted bits\n  exp += count;\n\n  frac &= mask1;\n  \n  if(i > 0)\n  {\n    d = frac & mask4; // deserted bits\n    if(d > mask3 | (d == mask3 && frac & mask2))\n    {\n      frac += mask2;\n      if(frac > 0x3fffffff)\n      {\n        frac = 0;\n        exp++;\n      }\n    }\n    frac >>= i;\n  }\n  else\n    frac <<= -i;\n\n  return sign | exp << 23 | frac;\n}\n```\n\n**分析：**\n\n> 我认为这题比较难，我做了很久很久....它难在浮点数向偶数舍入以及其操作数的限制。\n\n> 我们知道由于浮点数表示范围比整型大，我们可以将整型转换为浮点数，但是相应的会有一些精度的丢失，因为尾数frac只有23位，而int有31位可用。\n\n> 所以其关键在于int的位数，一开始先把该取出来的都用掩码取出来，把负数和零处理一下。之后我利用了一个循环先找出int的最高位在哪，利用count计数。\n\n> 后面我采取了四个掩码，分别代表最高位的1，留下的尾数中的最低位，要舍去的位数的最高位，以及舍弃的位数的掩码。利用这四个掩码我们可以达到存frac时，将其向**偶数舍入**。\n\n> 具体操作是，先取出丢弃的尾数，将其存放在d中，看其有没有超过0.5 (即 d 是否大于 mask3) 如果大于，直接frac++就行。而如果等于的话，还要看frac是否是奇数 (即frac & mask2是否为1) 如果是，则要向偶数舍入,frac++。\n\n> 加完frac之后还要注意**溢出问题**，如果溢出了，要将frac置0，然后把阶码 exp++，再按照之前输出来的尾数移动，将尾数对齐即可 （位数最高默认为1不存，因而把最高位隐去）。\n\n> 最后把符号位，阶码位和尾数位拼接，得到最后的结果。\n\n***\n\n### 15. float_twice--float * 2\n\n**题目：**\n\n    返回float * 2, 当参数是NaN时，返回参数\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 20\n\n**代码：**\n```cpp\nunsigned float_twice(unsigned uf) {\n  unsigned sign = uf & 0x80000000;\n  unsigned exp = uf & 0x7f800000;\n  unsigned frac = uf & 0x007fffff;\n  if(exp == 0x7f800000) //NaN & inf\n    return uf;\n  if(!exp && !frac) // 0\n    return uf;\n  if(!exp && frac <= 0x3fffff)  // low\n    frac *= 2;\n  else if(!exp && frac > 0x3fffff) // high\n  {\n    exp += 0x00800000;\n    frac = (frac * 2) & 0x7fffff;\n  }\n  else // normal\n    exp += 0x00800000;\n  return sign + exp + frac;\n}\n```\n\n**分析：**\n> 主要要分析的地方，在于当阶码exp为0时，是否在乘2之后进位。所以要考虑尾数是否大于0x3fffff，如果小于等于之，则直接尾数乘2就行，不会溢出，否则则exp要进位，同时尾数乘2之后要与上0x7fffff保证不溢出。\n\n> 其他正常情况直接exp++就行，注意一下特殊情况;\n\n*本题中测试集中有一个inf，也要直接返回参数uf*\n\n***\n\n## **Bits_honor.c**\n### **1. bitReverse--比特翻转**\n\n**题目：**\n\n    把32比特int的比特位翻转\n\n**样例：**\n\n    bitReverse(0x80000004) = 0x20000001\n    bitReverse(0x7FFFFFFF) = 0xFFFFFFFE\n    \n**最大操作数限制：** 40\n\n**使用操作数：** 40\n\n**代码：**\n```cpp\nint bitReverse(int x)\n{\n   int tmp,l1, l2, l4, l8, l16;\n\n   tmp = (0x55 << 8) + 0x55;\n   l1 = (tmp << 16) + tmp;\n   tmp = (0x33 << 8) + 0x33;\n   l2 = (tmp << 16) + tmp;\n   tmp = (0x0f << 8) + 0x0f;\n   l4 = (tmp << 16) + tmp;\n   l8 = (0xff << 16) + 0xff;\n   l16 = (0xff << 8) + 0xff;\n\n   x = ((x >> 16) & l16) | (x << 16);\n   x = ((x >> 8) & l8) | ((x & l8) << 8);\n   x = ((x >> 4) & l4) | ((x & l4) << 4);\n   x = ((x >> 2) & l2) | ((x & l2) << 2);\n   x = ((x >> 1) & l1) | ((x & l1) << 1);\n   return x;\n}\n```\n\n**分析：**\n\n> 这题和 bitsCount 有异曲同工之妙，也是一个分治法，将32位二进制数一分为二，交换，再将内部各自再一分为二，交换，直至最底层2位二进制数互换位置，最后完成了将所有位数翻转的工作。\n\n> 但值得注意的是，给出的是有符号的int，所以在右移交换位置时，会发生因为负数算术右移导致高位全是1的情况，致使在与的过程中高位全部变为1。这边只要将其移动后在和掩码相与就能解决这一问题。而对于低位，先与掩码相与再移动，可以省去取反得到高位掩码的操作数。再用tmp省一下操作数。\n\n> 最后操作数正好卡在40\n\n***\n\n### **2. mod3--取模3**\n\n**题目：**\n\n    计算 x 取模 3，而不用%\n\n**样例：**\n\n    mod3(100) = 1\n    mod3(-100) = -1\n\n**可使用操作：** ! ~ & ^ | + << >>\n    \n**最大操作数限制：** 90\n\n**使用操作数：** 24\n\n**代码：**\n```cpp\nint mod3(int x)\n{\n   int mask = (0xff << 8) + 0xff;\n\n   x = (x >> 16) + (x & mask); // sum base 4^8 digits (a <= 0x1FFFE)\n   x = (x >> 8) + (x & 0xff); // sum base 4^4 digits (a <= 0x2FD)\n   x = (x >> 4) + (x & 0xf); // sum base 4^2 digits (a <= 0x3C)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x1D)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x9)\n   x = (x >> 2) + (x & 0x3); // sum base 4^1 digits (a <= 0x4)\n\n   x = (((x + 1) >> 2) + x) & 0x3;\n   return x;\n}\n```\n\n**分析：**\n\n> 这题难度算是比较大的，我参考了一些资料最后才写出这个代码。其实这题也与bitsCount有着一定的联系。\n\n> 对于解这题有一个根本的公式即 \n    \n    a % m = ((b % m)(a/b) + (a % b)) % m\n    其中b是进制数\n\n> 我们知道，如果想要知道一个十进制的数能否被三整除，只要看它所有数位之和是否能被三整除就行了。其实这就是上述公式的特殊情况，由于10 mod 3 == 1 所以其就退化为\n\n    a mod m = (a/b + a % b) % m\n    递归下来就是所有数位之和\n\n> 而对于二进制的情况，我们可以将进制位b选为4，这样正好是两位二进制数，同时4 % 3 == 1，这样一来，对于二进制数中我们只需要统计所有两两数位(四进制)的和能否被三整除就行了。\n\n> 而考虑到我们每做一次 a/b + a % b 统计数位和都减小了数的规模，这样只要做有限次就能够将数控制在<=3的范围内。\n\n> 对于a % 4，这是一个经典的trivial情况，我们只需要做 a & 3，就能够轻松得到a % 4的值。而对于a/4，只需要做a >> 2即可。\n\n> 对于二进制数我们不仅可以按两位两位的四进制数位和来数，也可以直接数其倍数(4^i)，从最大4^8开始统计，一步步减小x的值，最后将x做到<= 3的范围\n\n> 最后要判断x是否为3，如果为3的话则要置为0，我利用3数位全为1的特点，将其+1进位后，右移2位。如果为3，则得到的是1。将其再加上x，如若x是1或2，则还是不变，但如果是3，它又会进位到4，那么我们只要再与上0x3，则会得到0，即为想要的结果。\n\n\n***\n\n### **3. float_f2i--float转int**\n\n**题目：**\n\n    输入一个按二进制位储存的float（以unsigned表示），将其转为int输出。(NaN,inf，溢出直接返回参数)\n\n**可使用操作：** 所有的整型操作，包括 ||, &&. 以及 if, while\n    \n**最大操作数限制：** 30\n\n**使用操作数：** 17\n\n**代码：**\n```cpp\nint float_f2i(unsigned uf)\n{\n   int sign, exp, frac, res;\n   unsigned int tmp;\n\n   if(!uf)\n      return 0;\n   sign = uf & 0x80000000;\n   exp = uf & 0x7f800000;\n   frac = (uf & 0x007fffff) | 0x00800000;\n\n   if(exp == 0x7f800000) //NaN and inf\n      return 0x80000000u;\n\n   exp >>= 23;\n\n   if(exp < 127)\n      return 0;\n   else if(exp > 158)\n      return 0x80000000u;\n   else if(exp > 150)\n      tmp = frac << (exp - 150);\n   else\n      tmp = frac >> (150 - exp);\n\n      \n   if(sign)\n      res = ~tmp + 1;\n   else\n      res = tmp;\n   \n   return res | sign;\n}\n```\n\n**分析：**\n\n> 这题特殊情况比较多，把NaN和inf处理一下，然后注意一下溢出情况，即取出来的exp - bias > 31，肯定超过2^31整型储存的最大值，直接返回0x80000000u，然后对于exp小于127的，其指数是负数，直接返回int值为0。对于在exp - bias 在 0 到 31 之间的，由于frac只有23位，所以要将注意一下讨论23的情况。\n\n> 最后把取出来的符号位对一下，如果负数取反加一，正数直接等，最后再或上符号位，返回答案。\n\n---\n\n## **结果截图**\n### **bits.c**\n\n![bits_btest](/img/ICS_Lab1/bits_btest.JPG)\n\n![bits_dlc](/img/ICS_Lab1/bits_dlc.png)\n\n### **bits_honor.c**\n\n![bits_honor_btest](/img/ICS_Lab1/bits_honor_btest.JPG)\n\n![bits_honor_dlc](/img/ICS_Lab1/bits_honor_dlc.png)\n\n\n\n## 参考\n***\n<https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin>\n<https://blog.csdn.net/jiahonghao2002/article/details/108223366>\n<https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/>\n<http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3>\n<https://www.zhihu.com/question/38206659/answer/763034261>\n<https://blog.csdn.net/xindaxinda123/article/details/95617758>\n<https://www.runoob.com/w3cnote/32-float-storage.html>","slug":"ICS_Lab1","published":1,"updated":"2020-11-06T13:51:43.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh6bkz8r000bkopd3eo513c6","content":"<h1 id=\"ICS-Lab1-位运算\"><a href=\"#ICS-Lab1-位运算\" class=\"headerlink\" title=\"ICS_Lab1-位运算\"></a>ICS_Lab1-位运算</h1><blockquote>\n<p>这个是CS:APP的第一个lab，也是我ICS课上的第一个lab，主要注重于使用受限制的位运算来完成操作</p>\n</blockquote>\n<hr>\n<h2 id=\"Bits-c\"><a href=\"#Bits-c\" class=\"headerlink\" title=\"Bits.c\"></a><strong>Bits.c</strong></h2><h3 id=\"1-bitAnd–与\"><a href=\"#1-bitAnd–与\" class=\"headerlink\" title=\"1. bitAnd–与\"></a><strong>1. bitAnd–与</strong></h3><p><strong>题目：</strong></p>\n<pre><code>只用~和|实现&amp;</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitAnd(6, 5) = 4</code></pre>\n<p><strong>可使用操作：</strong> ~ |</p>\n<p><strong>最大操作数限制：</strong> 8</p>\n<p><strong>使用操作数：</strong> 4</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitAnd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ~(~x | ~y); <span class=\"hljs-comment\">//De Morgan&#x27;s laws</span>\n&#125;</code></pre>\n\n<blockquote>\n<p>应用摩根律 <del>(x | y) = ~x &amp; ~y, 可得 x &amp; y = ~(</del>x | ~y)</p>\n</blockquote>\n<hr>\n<h3 id=\"2-getByte–获取字节\"><a href=\"#2-getByte–获取字节\" class=\"headerlink\" title=\"2. getByte–获取字节\"></a><strong>2. getByte–获取字节</strong></h3><p><strong>题目：</strong></p>\n<pre><code>从x中提取字节n, n编号从0至3</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>getByte(0x12345678,1) = 0x56</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 6</p>\n<p><strong>使用操作数：</strong> 3</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getByte</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> (x &gt;&gt; (n &lt;&lt; <span class=\"hljs-number\">3</span>)) &amp; <span class=\"hljs-number\">0xff</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<p>*由于 1Byte = 8bits = 2^3bits， 所以 n Bytes = 2^3 * n bits*</p>\n<blockquote>\n<p>因而将n左移3位，即 n * 2^3, 再将x右移 n * 2^3 即可将所求字节放在低8位，将其与上0xff，即可取出字节。</p>\n</blockquote>\n<hr>\n<h3 id=\"3-logicalShift–逻辑右移\"><a href=\"#3-logicalShift–逻辑右移\" class=\"headerlink\" title=\"3. logicalShift–逻辑右移\"></a><strong>3. logicalShift–逻辑右移</strong></h3><p><strong>题目：</strong></p>\n<pre><code>将x逻辑右移n位</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>logicalShift(0x87654321,4) = 0x08765432</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 20</p>\n<p><strong>使用操作数：</strong> 10</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">logicalShift</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-comment\">//flag equals to: if n == 0 return 0; else return 1;</span>\n  <span class=\"hljs-keyword\">int</span> flag = !!n;\n  <span class=\"hljs-keyword\">int</span> mask = ~(flag &lt;&lt; (<span class=\"hljs-number\">32</span> + (~n + <span class=\"hljs-number\">1</span>)));\n  <span class=\"hljs-keyword\">return</span> (x &gt;&gt; n) &amp; mask;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li><p>算数右移</p>\n<blockquote>\n<p>算数右移即在右移后用原符号位数将高位补齐，保持右移后二进制数的符号保持不变。</p>\n</blockquote>\n</li>\n<li><p>逻辑右移</p>\n<blockquote>\n<p>逻辑右移即在右移后用 0 将高位补齐，是“逻辑上”的右移。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>在正常右移运算中使用的是算数右移，因而要解决的问题即对于负数如何将最高位补上0，而非符号位1。<br>我采取掩码的方式，先将x正常右移n位与上其高位的掩码，使其右移产生的高位变为0</p>\n</blockquote>\n<ul>\n<li>掩码构造<blockquote>\n<p>掩码不能草率的构造为 ~(-1 &lt;&lt; (32 - n)), 这种构造方式当n为0时会因-1被左移32位而导致异常，构造出来的mask仍为0</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>由于不能使用if，为判断n是否为0，我才用了一个flag = !n + ~0, 其有很好的性质。当n为0时，flag也为0，而当n不为零时，flag统一为-1，这样使用flag代替原先的-1, 从而避免上述情况。</p>\n</blockquote>\n<blockquote>\n<p>这样我们可以使用 mask = <del>(flag &lt;&lt; (32 + (</del>n + 1)))，来构造掩码，当n为0时，flag为0，从而mask = -1，避免上述错误。</p>\n</blockquote>\n<hr>\n<h3 id=\"4-bitCount–比特计数\"><a href=\"#4-bitCount–比特计数\" class=\"headerlink\" title=\"4. bitCount–比特计数\"></a><strong>4. bitCount–比特计数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回二进制数中1的个数</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitCount(5) = 2, bitCount(7) = 3</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 40</p>\n<p><strong>使用操作数：</strong> 36</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitCount</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> tmp, l1, l2, l4, l8, l16; <span class=\"hljs-comment\">//tmp is used to save ops</span>\n  tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n  l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x55555555</span>\n  tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n  l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x33333333</span>\n  tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n  l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x0f0f0f0f</span>\n  l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>; <span class=\"hljs-comment\">//0x00ff00ff</span>\n  l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>; <span class=\"hljs-comment\">//0x0000ffff</span>\n\n  x = (x &amp; l1) + ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1);\n  x = (x &amp; l2) + ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2);\n  x = (x &amp; l4) + ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4);\n  x = (x &amp; l8) + ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8);\n  x = (x &amp; l16) + ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16);\n  <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>分治思想<blockquote>\n<p>本题使用了一个简单的分治思想，对于一个二进制数，要对其中为1的位做计数， 对于1位二进制数来说，1的个数无非就是其本身所表示的1或0。利用这个特性，我们可以先将一个二进制数每一位独立分开为相间隔的两部分, 其每位表示的就是自身的二进制个数，再将两串二进制数对其相加，所得到的每两位分隔的二进制数就是表达这个位置的位为1的个数。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>进一步相加为4位，8位其所代表的含义不变，最后合并至32位二进制数，其所表示的就是原二进制数中所含1的个数。</p>\n</blockquote>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//以八位二进制数 10101110 为例//</span>\n按 <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span> 分割， 为两串<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>和<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>，再将其合并，成为 <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">10</span> | <span class=\"hljs-number\">01</span>, 再将两串 <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">10</span> 和<span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">01</span>合并得 <span class=\"hljs-number\">0010</span> | <span class=\"hljs-number\">0011</span>（这个很容易看出表示左四位有<span class=\"hljs-number\">2</span>个<span class=\"hljs-number\">1</span>，右四位有<span class=\"hljs-number\">3</span>个<span class=\"hljs-number\">1</span>），再次合并得 <span class=\"hljs-number\">00000101</span>, 得到总共有<span class=\"hljs-number\">5</span>个<span class=\"hljs-number\">1</span>。\n\n<span class=\"hljs-comment\">//对于32位二进制数亦按此继续操作即可//</span></code></pre>\n\n<blockquote>\n<p>于是为完成分割取位的操作，我们需要采用掩码</p>\n</blockquote>\n<ul>\n<li>0x55555555 \\ 0x33333333 \\ 0x0f0f0f0f \\ 0x0000ffff</li>\n</ul>\n<blockquote>\n<p>利用位运算分别构造，使用tmp可以节约ops, 之后按照分治思想进行操作即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"5-bang–逻辑非\"><a href=\"#5-bang–逻辑非\" class=\"headerlink\" title=\"5. bang–逻辑非\"></a><strong>5. bang–逻辑非</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 !x 而不使用逻辑非!</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bang(3) = 0, bang(0) = 1</code></pre>\n<p><strong>可使用操作：</strong> ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 12</p>\n<p><strong>使用操作数：</strong> 6</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bang</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ((x &gt;&gt; <span class=\"hljs-number\">31</span>) | ((~x + <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">31</span>)) + <span class=\"hljs-number\">1</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>逻辑非<blockquote>\n<p>对于逻辑非运算，应该都很熟悉，!x 当且仅当x为0时其为1，其余时候都为0，可以用来区分零和非零数。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>该问题的关键就是在于如何区分零和非零数，我们知道零的二补码仍然是零，而对于其余非零数，其符号位会有相应改变，利用这一性质，我们可以对零和非零数做出区分。</p>\n</blockquote>\n<blockquote>\n<p>使用 <code>((x &gt;&gt; 31) | ((~x + 1) &gt;&gt; 31))</code>，将二进制数x的符号位与其补码左移31位相与，如若是非零数，其中符号位至少有一个为1，所以经过31位的算数右移后，其中一项必为-1，一项为0，相与之后得到-1,。而对于0来说，结果始终为0。</p>\n</blockquote>\n<blockquote>\n<p>最后只要将结果+1，就能得到逻辑非的效果。</p>\n</blockquote>\n<hr>\n<h3 id=\"6-tmin–最小数\"><a href=\"#6-tmin–最小数\" class=\"headerlink\" title=\"6. tmin–最小数\"></a><strong>6. tmin–最小数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回二补码中最小的数</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 4</p>\n<p><strong>使用操作数：</strong> 1</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tmin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">31</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>此题非常简单，我们知道计算机中负数是用其补码表示的，int所能表示的最小数为0x80000000(-2^31), 即符号位为1，其余皆为0，所以只要将1左移31位即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"7-fitsBits–填充比特\"><a href=\"#7-fitsBits–填充比特\" class=\"headerlink\" title=\"7. fitsBits–填充比特\"></a><strong>7. fitsBits–填充比特</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回1如果x可以表示为n位二补码，反之返回0 (1 &lt;= n &lt;= 32)</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>fitsBits(5,3) = 0, fitsBits(-4,3) = 1</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 15</p>\n<p><strong>使用操作数：</strong> 7</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fitsBits</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> k = x &gt;&gt; (n + ~<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// if can k = 0 or -1</span>\n  <span class=\"hljs-keyword\">return</span> !k | !(k + <span class=\"hljs-number\">1</span>);\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我们知道如若一个数能够被n位二进制数表示，则其第n位即最高位是符号位，那么将其右移n-1位后，根据算术右移，其得到的结果不是0，就是1。否则表示，其还有高于n位的位数， 即不能用n位表示。</p>\n</blockquote>\n<blockquote>\n<p>所以用 k = x &gt;&gt; (n + ~0) 表示将其右移n-1位，再用 !k | !(k + 1) 判断k是否为0或-1</p>\n</blockquote>\n<hr>\n<h3 id=\"8-divpwr2–除以2的n次方\"><a href=\"#8-divpwr2–除以2的n次方\" class=\"headerlink\" title=\"8. divpwr2–除以2的n次方\"></a><strong>8. divpwr2–除以2的n次方</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 x/(2^n), (0 &lt;= n &lt;= 30)</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>divpwr2(15,1) = 7, divpwr2(-33,4) = -2</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 15</p>\n<p><strong>使用操作数：</strong> 7</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">divpwr2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n    <span class=\"hljs-keyword\">int</span> sign = x &gt;&gt; <span class=\"hljs-number\">31</span>;\n    <span class=\"hljs-keyword\">int</span> bias = (<span class=\"hljs-number\">1</span> &lt;&lt; n) + ~<span class=\"hljs-number\">0</span>;\n    x = x + (bias &amp; sign);\n    <span class=\"hljs-keyword\">return</span> x &gt;&gt; n;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>本题的难点在于Round toward zero, 我们知道除以2的n次方即为将x右移n位。对于正数，尾数截断，因而自然向0舍入。而对于负数则不是如此，经试验在gcc上对于负数，其是向偶数舍入的，因而我们要对负数进行操作。</p>\n</blockquote>\n<blockquote>\n<p>同时由于其向偶数舍入，我们不能简单地对负数进行+1操作，例如原本正确的 -7/4 = -1.25 = -1，但是经过+1操作后变为-6/4 = -1.5 Round toward even则变为了2。所以我们不应简单加一，而是加一个偏差值，其为2^n - 1，对于-7/4来说，就是3，加上bias之后得到(-7 + 3)/4即为-1。</p>\n</blockquote>\n<blockquote>\n<p>所以我们构造bias = (1 &lt;&lt; n) + <del>0 (由于不能用减号，-1用+</del>0表示)，然后我们要记得将sign取出，在x进行加操作时先检查一下x是否是负数，再进行操作。最后只要方向的将x右移n位即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"9-negate–取负\"><a href=\"#9-negate–取负\" class=\"headerlink\" title=\"9. negate–取负\"></a><strong>9. negate–取负</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回-x</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>negate(1) = -1.</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 5</p>\n<p><strong>使用操作数：</strong> 2</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">negate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ~x + <span class=\"hljs-number\">1</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>很简单，对于有符号二进制数取负就是取其补码，而补码等于其取反加一，返回取反加一即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"10-isPositive–是正数\"><a href=\"#10-isPositive–是正数\" class=\"headerlink\" title=\"10. isPositive–是正数\"></a><strong>10. isPositive–是正数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回1如果x大于0，反之返回0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>isPositive(-1) = 0.</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 8</p>\n<p><strong>使用操作数：</strong> 5</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">isPositive</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> !(x &gt;&gt; <span class=\"hljs-number\">31</span>) &amp; !!x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题关键在于把0剔除了，区分正负数就是区分其符号位，将x右移31位，负数得-1，正数为0，用一个逻辑非使正数为1，负数为0，然后再和!!x与一下就能剔除0</p>\n</blockquote>\n<ul>\n<li>!!x 当 x == 0 时返回 0，不为 0 时返回 1</li>\n</ul>\n<hr>\n<h3 id=\"11-isLessOrEqual–小于等于\"><a href=\"#11-isLessOrEqual–小于等于\" class=\"headerlink\" title=\"11. isLessOrEqual–小于等于\"></a><strong>11. isLessOrEqual–小于等于</strong></h3><p><strong>题目：</strong></p>\n<pre><code>如果x小于等于y返回1，反之返回0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>isLessOrEqual(4,5) = 1.</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 24</p>\n<p><strong>使用操作数：</strong> 14</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">isLessOrEqual</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> res = y + (~x + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// y - x</span>\n  <span class=\"hljs-keyword\">int</span> xSign = x &gt;&gt; <span class=\"hljs-number\">31</span>;\n  <span class=\"hljs-keyword\">int</span> ySign = y &gt;&gt; <span class=\"hljs-number\">31</span>;\n  <span class=\"hljs-keyword\">int</span> dif = ~xSign + ySign;\n  <span class=\"hljs-keyword\">return</span> (~(dif + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">31</span>) &amp; !(res &gt;&gt; <span class=\"hljs-number\">31</span>)) | !dif;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我在这里采取了作差的方法 res = y + (~x + 1)，即计算一下y-x，判断其是否非负，同时也要考虑溢出问题，即 x 为负数，y为正数，y-x后溢出为负。</p>\n</blockquote>\n<blockquote>\n<p>我将x,y右移31位代表其符号，若负则为-1，若正为0。我同时构造了一个 dif 以表示x,y符号之间的关系。</p>\n</blockquote>\n<blockquote>\n<p><strong>dif = ~xSign + ySign</strong></p>\n</blockquote>\n<ol>\n<li> 当 x &lt; 0 &amp;&amp; y &lt; 0 时，dif = -1 </li>\n<li> 当 x &lt; 0 &amp;&amp; y &gt; 0 时，dif = 0 </li>\n<li> 当 x &gt; 0 &amp;&amp; y &lt; 0 时，dif = -2 </li>\n<li> 当 x &gt; 0 &amp;&amp; y &lt; 0 时，dif = -1</li>\n</ol>\n<blockquote>\n<p>将 x,y 符号之间的关系表达出来，把 dif 加一我们可以观察到当 x,y 同号时，dif为0，所以将其取反和 !(res &gt;&gt; 31) 相与，就可以表示同号不溢出的情况，而当 x &lt; 0, y &gt; 0 的情况发生时，我们注意到 dif 就是 0 ，所以我们直接或上 !dif 即可表达这种情况。</p>\n</blockquote>\n<hr>\n<h3 id=\"12-ilog2–以2为底的对数\"><a href=\"#12-ilog2–以2为底的对数\" class=\"headerlink\" title=\"12. ilog2–以2为底的对数\"></a><strong>12. ilog2–以2为底的对数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回x取以2为底的对数并向下取整，输入的 x &gt; 0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>ilog2(16) = 4</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 90</p>\n<p><strong>使用操作数：</strong> 48</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">ilog2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> tmp, l1, l2, l4, l8, l16;\n  x |= x &gt;&gt; <span class=\"hljs-number\">1</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">2</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">4</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">8</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">16</span>;\n  \n  tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n  l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n  l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n  l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>;\n  l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n  x = (x &amp; l1) + ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1);\n  x = (x &amp; l2) + ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2);\n  x = (x &amp; l4) + ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4);\n  x = (x &amp; l8) + ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8);\n  x = (x &amp; l16) + ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16);\n  <span class=\"hljs-keyword\">return</span> x + ~<span class=\"hljs-number\">0</span>;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我们知道二进制数每位有其位权，所以对 x 取以2为底的对数就是指其为1的最高位的位权。为了获得最高位的位置，其实我们可以将其最高位往下全部变为1，再类似bitsCount数其中1的个数就行了。</p>\n</blockquote>\n<blockquote>\n<p>我把 x 移位相与，保证最高位往下所有数字为1，再使用bitsCount就得到答案。</p>\n</blockquote>\n<blockquote>\n<p>最后不要忘记减一</p>\n</blockquote>\n<hr>\n<h3 id=\"13-float-neg–浮点数的负数\"><a href=\"#13-float-neg–浮点数的负数\" class=\"headerlink\" title=\"13. float_neg–浮点数的负数\"></a><strong>13. float_neg–浮点数的负数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回-f，当NaN时，返回参数f</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 10</p>\n<p><strong>使用操作数：</strong> 5</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_neg</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> frac = uf &amp; <span class=\"hljs-number\">0x007fffff</span>;\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span> &amp;&amp; frac)\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">return</span> uf ^= <span class=\"hljs-number\">0x80000000</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>IEEE-float<blockquote>\n<p>我们知道IEEE单精度浮点数，最高位为符号位，其后8位为阶码exp，后23位为尾数frac。其牺牲了精度来扩大了表达范围。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>而当 exp 全 1 时，如若frac非全零，则表示NaN。若全零，则表示无穷大/小。</p>\n</blockquote>\n<blockquote>\n<p>这里我们只要将原数和符号位0x80000000异或一下，即可取负。不要忘记排除NaN的情况。</p>\n</blockquote>\n<hr>\n<h3 id=\"14-float-i2f–int转float\"><a href=\"#14-float-i2f–int转float\" class=\"headerlink\" title=\"14. float_i2f–int转float\"></a><strong>14. float_i2f–int转float</strong></h3><p><strong>题目：</strong></p>\n<pre><code>把int类型的数转换为float表示(比特形式)</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 30</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_i2f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> frac, mask1, mask2, mask3, mask4, d;\n  <span class=\"hljs-keyword\">int</span> high = <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> sign = x &amp; <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = <span class=\"hljs-number\">127</span>;\n  <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">32</span>, i;\n  <span class=\"hljs-keyword\">if</span>(sign)\n    x = ~x + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!x)\n    <span class=\"hljs-keyword\">return</span> x;\n  \n  frac = x;\n\n  <span class=\"hljs-keyword\">for</span>(;high; high &gt;&gt;= <span class=\"hljs-number\">1</span>)\n  &#123;\n    --count;\n    <span class=\"hljs-keyword\">if</span>(high &amp; x)\n      <span class=\"hljs-keyword\">break</span>;\n  &#125;\n  i = count - <span class=\"hljs-number\">23</span>;\n  mask1 = ~(<span class=\"hljs-number\">1</span> &lt;&lt; count); <span class=\"hljs-comment\">// the highest 1</span>\n  mask2 = <span class=\"hljs-number\">1</span> &lt;&lt; i; <span class=\"hljs-comment\">//the lowest of remain frac;</span>\n  mask3 = mask2 &gt;&gt; <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// the highest of deserted bits </span>\n  mask4 = mask2 - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// the deserted bits</span>\n  <span class=\"hljs-built_in\">exp</span> += count;\n\n  frac &amp;= mask1;\n  \n  <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">0</span>)\n  &#123;\n    d = frac &amp; mask4; <span class=\"hljs-comment\">// deserted bits</span>\n    <span class=\"hljs-keyword\">if</span>(d &gt; mask3 | (d == mask3 &amp;&amp; frac &amp; mask2))\n    &#123;\n      frac += mask2;\n      <span class=\"hljs-keyword\">if</span>(frac &gt; <span class=\"hljs-number\">0x3fffffff</span>)\n      &#123;\n        frac = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-built_in\">exp</span>++;\n      &#125;\n    &#125;\n    frac &gt;&gt;= i;\n  &#125;\n  <span class=\"hljs-keyword\">else</span>\n    frac &lt;&lt;= -i;\n\n  <span class=\"hljs-keyword\">return</span> sign | <span class=\"hljs-built_in\">exp</span> &lt;&lt; <span class=\"hljs-number\">23</span> | frac;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我认为这题比较难，我做了很久很久….它难在浮点数向偶数舍入以及其操作数的限制。</p>\n</blockquote>\n<blockquote>\n<p>我们知道由于浮点数表示范围比整型大，我们可以将整型转换为浮点数，但是相应的会有一些精度的丢失，因为尾数frac只有23位，而int有31位可用。</p>\n</blockquote>\n<blockquote>\n<p>所以其关键在于int的位数，一开始先把该取出来的都用掩码取出来，把负数和零处理一下。之后我利用了一个循环先找出int的最高位在哪，利用count计数。</p>\n</blockquote>\n<blockquote>\n<p>后面我采取了四个掩码，分别代表最高位的1，留下的尾数中的最低位，要舍去的位数的最高位，以及舍弃的位数的掩码。利用这四个掩码我们可以达到存frac时，将其向<strong>偶数舍入</strong>。</p>\n</blockquote>\n<blockquote>\n<p>具体操作是，先取出丢弃的尾数，将其存放在d中，看其有没有超过0.5 (即 d 是否大于 mask3) 如果大于，直接frac++就行。而如果等于的话，还要看frac是否是奇数 (即frac &amp; mask2是否为1) 如果是，则要向偶数舍入,frac++。</p>\n</blockquote>\n<blockquote>\n<p>加完frac之后还要注意<strong>溢出问题</strong>，如果溢出了，要将frac置0，然后把阶码 exp++，再按照之前输出来的尾数移动，将尾数对齐即可 （位数最高默认为1不存，因而把最高位隐去）。</p>\n</blockquote>\n<blockquote>\n<p>最后把符号位，阶码位和尾数位拼接，得到最后的结果。</p>\n</blockquote>\n<hr>\n<h3 id=\"15-float-twice–float-2\"><a href=\"#15-float-twice–float-2\" class=\"headerlink\" title=\"15. float_twice–float * 2\"></a>15. float_twice–float * 2</h3><p><strong>题目：</strong></p>\n<pre><code>返回float * 2, 当参数是NaN时，返回参数</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 20</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_twice</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> sign = uf &amp; <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> frac = uf &amp; <span class=\"hljs-number\">0x007fffff</span>;\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span>) <span class=\"hljs-comment\">//NaN &amp; inf</span>\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; !frac) <span class=\"hljs-comment\">// 0</span>\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; frac &lt;= <span class=\"hljs-number\">0x3fffff</span>)  <span class=\"hljs-comment\">// low</span>\n    frac *= <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; frac &gt; <span class=\"hljs-number\">0x3fffff</span>) <span class=\"hljs-comment\">// high</span>\n  &#123;\n    <span class=\"hljs-built_in\">exp</span> += <span class=\"hljs-number\">0x00800000</span>;\n    frac = (frac * <span class=\"hljs-number\">2</span>) &amp; <span class=\"hljs-number\">0x7fffff</span>;\n  &#125;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">// normal</span>\n    <span class=\"hljs-built_in\">exp</span> += <span class=\"hljs-number\">0x00800000</span>;\n  <span class=\"hljs-keyword\">return</span> sign + <span class=\"hljs-built_in\">exp</span> + frac;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>主要要分析的地方，在于当阶码exp为0时，是否在乘2之后进位。所以要考虑尾数是否大于0x3fffff，如果小于等于之，则直接尾数乘2就行，不会溢出，否则则exp要进位，同时尾数乘2之后要与上0x7fffff保证不溢出。</p>\n</blockquote>\n<blockquote>\n<p>其他正常情况直接exp++就行，注意一下特殊情况;</p>\n</blockquote>\n<p><em>本题中测试集中有一个inf，也要直接返回参数uf</em></p>\n<hr>\n<h2 id=\"Bits-honor-c\"><a href=\"#Bits-honor-c\" class=\"headerlink\" title=\"Bits_honor.c\"></a><strong>Bits_honor.c</strong></h2><h3 id=\"1-bitReverse–比特翻转\"><a href=\"#1-bitReverse–比特翻转\" class=\"headerlink\" title=\"1. bitReverse–比特翻转\"></a><strong>1. bitReverse–比特翻转</strong></h3><p><strong>题目：</strong></p>\n<pre><code>把32比特int的比特位翻转</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitReverse(0x80000004) = 0x20000001\nbitReverse(0x7FFFFFFF) = 0xFFFFFFFE</code></pre>\n<p><strong>最大操作数限制：</strong> 40</p>\n<p><strong>使用操作数：</strong> 40</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitReverse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> tmp,l1, l2, l4, l8, l16;\n\n   tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n   l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n   l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n   l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>;\n   l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n   x = ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16) | (x &lt;&lt; <span class=\"hljs-number\">16</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8) | ((x &amp; l8) &lt;&lt; <span class=\"hljs-number\">8</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4) | ((x &amp; l4) &lt;&lt; <span class=\"hljs-number\">4</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2) | ((x &amp; l2) &lt;&lt; <span class=\"hljs-number\">2</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1) | ((x &amp; l1) &lt;&lt; <span class=\"hljs-number\">1</span>);\n   <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题和 bitsCount 有异曲同工之妙，也是一个分治法，将32位二进制数一分为二，交换，再将内部各自再一分为二，交换，直至最底层2位二进制数互换位置，最后完成了将所有位数翻转的工作。</p>\n</blockquote>\n<blockquote>\n<p>但值得注意的是，给出的是有符号的int，所以在右移交换位置时，会发生因为负数算术右移导致高位全是1的情况，致使在与的过程中高位全部变为1。这边只要将其移动后在和掩码相与就能解决这一问题。而对于低位，先与掩码相与再移动，可以省去取反得到高位掩码的操作数。再用tmp省一下操作数。</p>\n</blockquote>\n<blockquote>\n<p>最后操作数正好卡在40</p>\n</blockquote>\n<hr>\n<h3 id=\"2-mod3–取模3\"><a href=\"#2-mod3–取模3\" class=\"headerlink\" title=\"2. mod3–取模3\"></a><strong>2. mod3–取模3</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 x 取模 3，而不用%</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>mod3(100) = 1\nmod3(-100) = -1</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 90</p>\n<p><strong>使用操作数：</strong> 24</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">mod3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> mask = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n   x = (x &gt;&gt; <span class=\"hljs-number\">16</span>) + (x &amp; mask); <span class=\"hljs-comment\">// sum base 4^8 digits (a &lt;= 0x1FFFE)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">8</span>) + (x &amp; <span class=\"hljs-number\">0xff</span>); <span class=\"hljs-comment\">// sum base 4^4 digits (a &lt;= 0x2FD)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">4</span>) + (x &amp; <span class=\"hljs-number\">0xf</span>); <span class=\"hljs-comment\">// sum base 4^2 digits (a &lt;= 0x3C)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x1D)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x9)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x4)</span>\n\n   x = (((x + <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">2</span>) + x) &amp; <span class=\"hljs-number\">0x3</span>;\n   <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题难度算是比较大的，我参考了一些资料最后才写出这个代码。其实这题也与bitsCount有着一定的联系。</p>\n</blockquote>\n<blockquote>\n<p>对于解这题有一个根本的公式即 </p>\n</blockquote>\n<pre><code>a % m = ((b % m)(a/b) + (a % b)) % m\n其中b是进制数</code></pre>\n<blockquote>\n<p>我们知道，如果想要知道一个十进制的数能否被三整除，只要看它所有数位之和是否能被三整除就行了。其实这就是上述公式的特殊情况，由于10 mod 3 == 1 所以其就退化为</p>\n</blockquote>\n<pre><code>a mod m = (a/b + a % b) % m\n递归下来就是所有数位之和</code></pre>\n<blockquote>\n<p>而对于二进制的情况，我们可以将进制位b选为4，这样正好是两位二进制数，同时4 % 3 == 1，这样一来，对于二进制数中我们只需要统计所有两两数位(四进制)的和能否被三整除就行了。</p>\n</blockquote>\n<blockquote>\n<p>而考虑到我们每做一次 a/b + a % b 统计数位和都减小了数的规模，这样只要做有限次就能够将数控制在&lt;=3的范围内。</p>\n</blockquote>\n<blockquote>\n<p>对于a % 4，这是一个经典的trivial情况，我们只需要做 a &amp; 3，就能够轻松得到a % 4的值。而对于a/4，只需要做a &gt;&gt; 2即可。</p>\n</blockquote>\n<blockquote>\n<p>对于二进制数我们不仅可以按两位两位的四进制数位和来数，也可以直接数其倍数(4^i)，从最大4^8开始统计，一步步减小x的值，最后将x做到&lt;= 3的范围</p>\n</blockquote>\n<blockquote>\n<p>最后要判断x是否为3，如果为3的话则要置为0，我利用3数位全为1的特点，将其+1进位后，右移2位。如果为3，则得到的是1。将其再加上x，如若x是1或2，则还是不变，但如果是3，它又会进位到4，那么我们只要再与上0x3，则会得到0，即为想要的结果。</p>\n</blockquote>\n<hr>\n<h3 id=\"3-float-f2i–float转int\"><a href=\"#3-float-f2i–float转int\" class=\"headerlink\" title=\"3. float_f2i–float转int\"></a><strong>3. float_f2i–float转int</strong></h3><p><strong>题目：</strong></p>\n<pre><code>输入一个按二进制位储存的float（以unsigned表示），将其转为int输出。(NaN,inf，溢出直接返回参数)</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 17</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">float_f2i</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> sign, <span class=\"hljs-built_in\">exp</span>, frac, res;\n   <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> tmp;\n\n   <span class=\"hljs-keyword\">if</span>(!uf)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n   sign = uf &amp; <span class=\"hljs-number\">0x80000000</span>;\n   <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n   frac = (uf &amp; <span class=\"hljs-number\">0x007fffff</span>) | <span class=\"hljs-number\">0x00800000</span>;\n\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span>) <span class=\"hljs-comment\">//NaN and inf</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0x80000000</span>u;\n\n   <span class=\"hljs-built_in\">exp</span> &gt;&gt;= <span class=\"hljs-number\">23</span>;\n\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &lt; <span class=\"hljs-number\">127</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &gt; <span class=\"hljs-number\">158</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0x80000000</span>u;\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &gt; <span class=\"hljs-number\">150</span>)\n      tmp = frac &lt;&lt; (<span class=\"hljs-built_in\">exp</span> - <span class=\"hljs-number\">150</span>);\n   <span class=\"hljs-keyword\">else</span>\n      tmp = frac &gt;&gt; (<span class=\"hljs-number\">150</span> - <span class=\"hljs-built_in\">exp</span>);\n\n      \n   <span class=\"hljs-keyword\">if</span>(sign)\n      res = ~tmp + <span class=\"hljs-number\">1</span>;\n   <span class=\"hljs-keyword\">else</span>\n      res = tmp;\n   \n   <span class=\"hljs-keyword\">return</span> res | sign;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题特殊情况比较多，把NaN和inf处理一下，然后注意一下溢出情况，即取出来的exp - bias &gt; 31，肯定超过2^31整型储存的最大值，直接返回0x80000000u，然后对于exp小于127的，其指数是负数，直接返回int值为0。对于在exp - bias 在 0 到 31 之间的，由于frac只有23位，所以要将注意一下讨论23的情况。</p>\n</blockquote>\n<blockquote>\n<p>最后把取出来的符号位对一下，如果负数取反加一，正数直接等，最后再或上符号位，返回答案。</p>\n</blockquote>\n<hr>\n<h2 id=\"结果截图\"><a href=\"#结果截图\" class=\"headerlink\" title=\"结果截图\"></a><strong>结果截图</strong></h2><h3 id=\"bits-c\"><a href=\"#bits-c\" class=\"headerlink\" title=\"bits.c\"></a><strong>bits.c</strong></h3><p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_btest.JPG\" alt=\"bits_btest\"></p>\n<p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_dlc.png\" alt=\"bits_dlc\"></p>\n<h3 id=\"bits-honor-c\"><a href=\"#bits-honor-c\" class=\"headerlink\" title=\"bits_honor.c\"></a><strong>bits_honor.c</strong></h3><p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_honor_btest.JPG\" alt=\"bits_honor_btest\"></p>\n<p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_honor_dlc.png\" alt=\"bits_honor_dlc\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p><a href=\"https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin\">https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin</a><br><a href=\"https://blog.csdn.net/jiahonghao2002/article/details/108223366\">https://blog.csdn.net/jiahonghao2002/article/details/108223366</a><br><a href=\"https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/\">https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/</a><br><a href=\"http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3\">http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3</a><br><a href=\"https://www.zhihu.com/question/38206659/answer/763034261\">https://www.zhihu.com/question/38206659/answer/763034261</a><br><a href=\"https://blog.csdn.net/xindaxinda123/article/details/95617758\">https://blog.csdn.net/xindaxinda123/article/details/95617758</a><br><a href=\"https://www.runoob.com/w3cnote/32-float-storage.html\">https://www.runoob.com/w3cnote/32-float-storage.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ICS-Lab1-位运算\"><a href=\"#ICS-Lab1-位运算\" class=\"headerlink\" title=\"ICS_Lab1-位运算\"></a>ICS_Lab1-位运算</h1><blockquote>\n<p>这个是CS:APP的第一个lab，也是我ICS课上的第一个lab，主要注重于使用受限制的位运算来完成操作</p>\n</blockquote>\n<hr>\n<h2 id=\"Bits-c\"><a href=\"#Bits-c\" class=\"headerlink\" title=\"Bits.c\"></a><strong>Bits.c</strong></h2><h3 id=\"1-bitAnd–与\"><a href=\"#1-bitAnd–与\" class=\"headerlink\" title=\"1. bitAnd–与\"></a><strong>1. bitAnd–与</strong></h3><p><strong>题目：</strong></p>\n<pre><code>只用~和|实现&amp;</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitAnd(6, 5) = 4</code></pre>\n<p><strong>可使用操作：</strong> ~ |</p>\n<p><strong>最大操作数限制：</strong> 8</p>\n<p><strong>使用操作数：</strong> 4</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitAnd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ~(~x | ~y); <span class=\"hljs-comment\">//De Morgan&#x27;s laws</span>\n&#125;</code></pre>\n\n<blockquote>\n<p>应用摩根律 <del>(x | y) = ~x &amp; ~y, 可得 x &amp; y = ~(</del>x | ~y)</p>\n</blockquote>\n<hr>\n<h3 id=\"2-getByte–获取字节\"><a href=\"#2-getByte–获取字节\" class=\"headerlink\" title=\"2. getByte–获取字节\"></a><strong>2. getByte–获取字节</strong></h3><p><strong>题目：</strong></p>\n<pre><code>从x中提取字节n, n编号从0至3</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>getByte(0x12345678,1) = 0x56</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 6</p>\n<p><strong>使用操作数：</strong> 3</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getByte</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> (x &gt;&gt; (n &lt;&lt; <span class=\"hljs-number\">3</span>)) &amp; <span class=\"hljs-number\">0xff</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<p>*由于 1Byte = 8bits = 2^3bits， 所以 n Bytes = 2^3 * n bits*</p>\n<blockquote>\n<p>因而将n左移3位，即 n * 2^3, 再将x右移 n * 2^3 即可将所求字节放在低8位，将其与上0xff，即可取出字节。</p>\n</blockquote>\n<hr>\n<h3 id=\"3-logicalShift–逻辑右移\"><a href=\"#3-logicalShift–逻辑右移\" class=\"headerlink\" title=\"3. logicalShift–逻辑右移\"></a><strong>3. logicalShift–逻辑右移</strong></h3><p><strong>题目：</strong></p>\n<pre><code>将x逻辑右移n位</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>logicalShift(0x87654321,4) = 0x08765432</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 20</p>\n<p><strong>使用操作数：</strong> 10</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">logicalShift</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-comment\">//flag equals to: if n == 0 return 0; else return 1;</span>\n  <span class=\"hljs-keyword\">int</span> flag = !!n;\n  <span class=\"hljs-keyword\">int</span> mask = ~(flag &lt;&lt; (<span class=\"hljs-number\">32</span> + (~n + <span class=\"hljs-number\">1</span>)));\n  <span class=\"hljs-keyword\">return</span> (x &gt;&gt; n) &amp; mask;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li><p>算数右移</p>\n<blockquote>\n<p>算数右移即在右移后用原符号位数将高位补齐，保持右移后二进制数的符号保持不变。</p>\n</blockquote>\n</li>\n<li><p>逻辑右移</p>\n<blockquote>\n<p>逻辑右移即在右移后用 0 将高位补齐，是“逻辑上”的右移。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>在正常右移运算中使用的是算数右移，因而要解决的问题即对于负数如何将最高位补上0，而非符号位1。<br>我采取掩码的方式，先将x正常右移n位与上其高位的掩码，使其右移产生的高位变为0</p>\n</blockquote>\n<ul>\n<li>掩码构造<blockquote>\n<p>掩码不能草率的构造为 ~(-1 &lt;&lt; (32 - n)), 这种构造方式当n为0时会因-1被左移32位而导致异常，构造出来的mask仍为0</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>由于不能使用if，为判断n是否为0，我才用了一个flag = !n + ~0, 其有很好的性质。当n为0时，flag也为0，而当n不为零时，flag统一为-1，这样使用flag代替原先的-1, 从而避免上述情况。</p>\n</blockquote>\n<blockquote>\n<p>这样我们可以使用 mask = <del>(flag &lt;&lt; (32 + (</del>n + 1)))，来构造掩码，当n为0时，flag为0，从而mask = -1，避免上述错误。</p>\n</blockquote>\n<hr>\n<h3 id=\"4-bitCount–比特计数\"><a href=\"#4-bitCount–比特计数\" class=\"headerlink\" title=\"4. bitCount–比特计数\"></a><strong>4. bitCount–比特计数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回二进制数中1的个数</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitCount(5) = 2, bitCount(7) = 3</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 40</p>\n<p><strong>使用操作数：</strong> 36</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitCount</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> tmp, l1, l2, l4, l8, l16; <span class=\"hljs-comment\">//tmp is used to save ops</span>\n  tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n  l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x55555555</span>\n  tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n  l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x33333333</span>\n  tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n  l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp; <span class=\"hljs-comment\">//0x0f0f0f0f</span>\n  l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>; <span class=\"hljs-comment\">//0x00ff00ff</span>\n  l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>; <span class=\"hljs-comment\">//0x0000ffff</span>\n\n  x = (x &amp; l1) + ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1);\n  x = (x &amp; l2) + ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2);\n  x = (x &amp; l4) + ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4);\n  x = (x &amp; l8) + ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8);\n  x = (x &amp; l16) + ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16);\n  <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>分治思想<blockquote>\n<p>本题使用了一个简单的分治思想，对于一个二进制数，要对其中为1的位做计数， 对于1位二进制数来说，1的个数无非就是其本身所表示的1或0。利用这个特性，我们可以先将一个二进制数每一位独立分开为相间隔的两部分, 其每位表示的就是自身的二进制个数，再将两串二进制数对其相加，所得到的每两位分隔的二进制数就是表达这个位置的位为1的个数。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>进一步相加为4位，8位其所代表的含义不变，最后合并至32位二进制数，其所表示的就是原二进制数中所含1的个数。</p>\n</blockquote>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//以八位二进制数 10101110 为例//</span>\n按 <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span> 分割， 为两串<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>和<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>，再将其合并，成为 <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">10</span> | <span class=\"hljs-number\">01</span>, 再将两串 <span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">10</span> 和<span class=\"hljs-number\">01</span> | <span class=\"hljs-number\">01</span>合并得 <span class=\"hljs-number\">0010</span> | <span class=\"hljs-number\">0011</span>（这个很容易看出表示左四位有<span class=\"hljs-number\">2</span>个<span class=\"hljs-number\">1</span>，右四位有<span class=\"hljs-number\">3</span>个<span class=\"hljs-number\">1</span>），再次合并得 <span class=\"hljs-number\">00000101</span>, 得到总共有<span class=\"hljs-number\">5</span>个<span class=\"hljs-number\">1</span>。\n\n<span class=\"hljs-comment\">//对于32位二进制数亦按此继续操作即可//</span></code></pre>\n\n<blockquote>\n<p>于是为完成分割取位的操作，我们需要采用掩码</p>\n</blockquote>\n<ul>\n<li>0x55555555 \\ 0x33333333 \\ 0x0f0f0f0f \\ 0x0000ffff</li>\n</ul>\n<blockquote>\n<p>利用位运算分别构造，使用tmp可以节约ops, 之后按照分治思想进行操作即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"5-bang–逻辑非\"><a href=\"#5-bang–逻辑非\" class=\"headerlink\" title=\"5. bang–逻辑非\"></a><strong>5. bang–逻辑非</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 !x 而不使用逻辑非!</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bang(3) = 0, bang(0) = 1</code></pre>\n<p><strong>可使用操作：</strong> ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 12</p>\n<p><strong>使用操作数：</strong> 6</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bang</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ((x &gt;&gt; <span class=\"hljs-number\">31</span>) | ((~x + <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">31</span>)) + <span class=\"hljs-number\">1</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>逻辑非<blockquote>\n<p>对于逻辑非运算，应该都很熟悉，!x 当且仅当x为0时其为1，其余时候都为0，可以用来区分零和非零数。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>该问题的关键就是在于如何区分零和非零数，我们知道零的二补码仍然是零，而对于其余非零数，其符号位会有相应改变，利用这一性质，我们可以对零和非零数做出区分。</p>\n</blockquote>\n<blockquote>\n<p>使用 <code>((x &gt;&gt; 31) | ((~x + 1) &gt;&gt; 31))</code>，将二进制数x的符号位与其补码左移31位相与，如若是非零数，其中符号位至少有一个为1，所以经过31位的算数右移后，其中一项必为-1，一项为0，相与之后得到-1,。而对于0来说，结果始终为0。</p>\n</blockquote>\n<blockquote>\n<p>最后只要将结果+1，就能得到逻辑非的效果。</p>\n</blockquote>\n<hr>\n<h3 id=\"6-tmin–最小数\"><a href=\"#6-tmin–最小数\" class=\"headerlink\" title=\"6. tmin–最小数\"></a><strong>6. tmin–最小数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回二补码中最小的数</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 4</p>\n<p><strong>使用操作数：</strong> 1</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tmin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">31</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>此题非常简单，我们知道计算机中负数是用其补码表示的，int所能表示的最小数为0x80000000(-2^31), 即符号位为1，其余皆为0，所以只要将1左移31位即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"7-fitsBits–填充比特\"><a href=\"#7-fitsBits–填充比特\" class=\"headerlink\" title=\"7. fitsBits–填充比特\"></a><strong>7. fitsBits–填充比特</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回1如果x可以表示为n位二补码，反之返回0 (1 &lt;= n &lt;= 32)</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>fitsBits(5,3) = 0, fitsBits(-4,3) = 1</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 15</p>\n<p><strong>使用操作数：</strong> 7</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fitsBits</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> k = x &gt;&gt; (n + ~<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// if can k = 0 or -1</span>\n  <span class=\"hljs-keyword\">return</span> !k | !(k + <span class=\"hljs-number\">1</span>);\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我们知道如若一个数能够被n位二进制数表示，则其第n位即最高位是符号位，那么将其右移n-1位后，根据算术右移，其得到的结果不是0，就是1。否则表示，其还有高于n位的位数， 即不能用n位表示。</p>\n</blockquote>\n<blockquote>\n<p>所以用 k = x &gt;&gt; (n + ~0) 表示将其右移n-1位，再用 !k | !(k + 1) 判断k是否为0或-1</p>\n</blockquote>\n<hr>\n<h3 id=\"8-divpwr2–除以2的n次方\"><a href=\"#8-divpwr2–除以2的n次方\" class=\"headerlink\" title=\"8. divpwr2–除以2的n次方\"></a><strong>8. divpwr2–除以2的n次方</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 x/(2^n), (0 &lt;= n &lt;= 30)</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>divpwr2(15,1) = 7, divpwr2(-33,4) = -2</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 15</p>\n<p><strong>使用操作数：</strong> 7</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">divpwr2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;\n    <span class=\"hljs-keyword\">int</span> sign = x &gt;&gt; <span class=\"hljs-number\">31</span>;\n    <span class=\"hljs-keyword\">int</span> bias = (<span class=\"hljs-number\">1</span> &lt;&lt; n) + ~<span class=\"hljs-number\">0</span>;\n    x = x + (bias &amp; sign);\n    <span class=\"hljs-keyword\">return</span> x &gt;&gt; n;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>本题的难点在于Round toward zero, 我们知道除以2的n次方即为将x右移n位。对于正数，尾数截断，因而自然向0舍入。而对于负数则不是如此，经试验在gcc上对于负数，其是向偶数舍入的，因而我们要对负数进行操作。</p>\n</blockquote>\n<blockquote>\n<p>同时由于其向偶数舍入，我们不能简单地对负数进行+1操作，例如原本正确的 -7/4 = -1.25 = -1，但是经过+1操作后变为-6/4 = -1.5 Round toward even则变为了2。所以我们不应简单加一，而是加一个偏差值，其为2^n - 1，对于-7/4来说，就是3，加上bias之后得到(-7 + 3)/4即为-1。</p>\n</blockquote>\n<blockquote>\n<p>所以我们构造bias = (1 &lt;&lt; n) + <del>0 (由于不能用减号，-1用+</del>0表示)，然后我们要记得将sign取出，在x进行加操作时先检查一下x是否是负数，再进行操作。最后只要方向的将x右移n位即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"9-negate–取负\"><a href=\"#9-negate–取负\" class=\"headerlink\" title=\"9. negate–取负\"></a><strong>9. negate–取负</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回-x</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>negate(1) = -1.</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 5</p>\n<p><strong>使用操作数：</strong> 2</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">negate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> ~x + <span class=\"hljs-number\">1</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>很简单，对于有符号二进制数取负就是取其补码，而补码等于其取反加一，返回取反加一即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"10-isPositive–是正数\"><a href=\"#10-isPositive–是正数\" class=\"headerlink\" title=\"10. isPositive–是正数\"></a><strong>10. isPositive–是正数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回1如果x大于0，反之返回0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>isPositive(-1) = 0.</code></pre>\n<p><strong>可使用操作：</strong>  ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 8</p>\n<p><strong>使用操作数：</strong> 5</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">isPositive</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> !(x &gt;&gt; <span class=\"hljs-number\">31</span>) &amp; !!x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题关键在于把0剔除了，区分正负数就是区分其符号位，将x右移31位，负数得-1，正数为0，用一个逻辑非使正数为1，负数为0，然后再和!!x与一下就能剔除0</p>\n</blockquote>\n<ul>\n<li>!!x 当 x == 0 时返回 0，不为 0 时返回 1</li>\n</ul>\n<hr>\n<h3 id=\"11-isLessOrEqual–小于等于\"><a href=\"#11-isLessOrEqual–小于等于\" class=\"headerlink\" title=\"11. isLessOrEqual–小于等于\"></a><strong>11. isLessOrEqual–小于等于</strong></h3><p><strong>题目：</strong></p>\n<pre><code>如果x小于等于y返回1，反之返回0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>isLessOrEqual(4,5) = 1.</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 24</p>\n<p><strong>使用操作数：</strong> 14</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">isLessOrEqual</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> res = y + (~x + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// y - x</span>\n  <span class=\"hljs-keyword\">int</span> xSign = x &gt;&gt; <span class=\"hljs-number\">31</span>;\n  <span class=\"hljs-keyword\">int</span> ySign = y &gt;&gt; <span class=\"hljs-number\">31</span>;\n  <span class=\"hljs-keyword\">int</span> dif = ~xSign + ySign;\n  <span class=\"hljs-keyword\">return</span> (~(dif + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">31</span>) &amp; !(res &gt;&gt; <span class=\"hljs-number\">31</span>)) | !dif;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我在这里采取了作差的方法 res = y + (~x + 1)，即计算一下y-x，判断其是否非负，同时也要考虑溢出问题，即 x 为负数，y为正数，y-x后溢出为负。</p>\n</blockquote>\n<blockquote>\n<p>我将x,y右移31位代表其符号，若负则为-1，若正为0。我同时构造了一个 dif 以表示x,y符号之间的关系。</p>\n</blockquote>\n<blockquote>\n<p><strong>dif = ~xSign + ySign</strong></p>\n</blockquote>\n<ol>\n<li> 当 x &lt; 0 &amp;&amp; y &lt; 0 时，dif = -1 </li>\n<li> 当 x &lt; 0 &amp;&amp; y &gt; 0 时，dif = 0 </li>\n<li> 当 x &gt; 0 &amp;&amp; y &lt; 0 时，dif = -2 </li>\n<li> 当 x &gt; 0 &amp;&amp; y &lt; 0 时，dif = -1</li>\n</ol>\n<blockquote>\n<p>将 x,y 符号之间的关系表达出来，把 dif 加一我们可以观察到当 x,y 同号时，dif为0，所以将其取反和 !(res &gt;&gt; 31) 相与，就可以表示同号不溢出的情况，而当 x &lt; 0, y &gt; 0 的情况发生时，我们注意到 dif 就是 0 ，所以我们直接或上 !dif 即可表达这种情况。</p>\n</blockquote>\n<hr>\n<h3 id=\"12-ilog2–以2为底的对数\"><a href=\"#12-ilog2–以2为底的对数\" class=\"headerlink\" title=\"12. ilog2–以2为底的对数\"></a><strong>12. ilog2–以2为底的对数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回x取以2为底的对数并向下取整，输入的 x &gt; 0</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>ilog2(16) = 4</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 90</p>\n<p><strong>使用操作数：</strong> 48</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">ilog2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">int</span> tmp, l1, l2, l4, l8, l16;\n  x |= x &gt;&gt; <span class=\"hljs-number\">1</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">2</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">4</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">8</span>;\n  x |= x &gt;&gt; <span class=\"hljs-number\">16</span>;\n  \n  tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n  l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n  l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n  l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n  l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>;\n  l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n  x = (x &amp; l1) + ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1);\n  x = (x &amp; l2) + ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2);\n  x = (x &amp; l4) + ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4);\n  x = (x &amp; l8) + ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8);\n  x = (x &amp; l16) + ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16);\n  <span class=\"hljs-keyword\">return</span> x + ~<span class=\"hljs-number\">0</span>;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我们知道二进制数每位有其位权，所以对 x 取以2为底的对数就是指其为1的最高位的位权。为了获得最高位的位置，其实我们可以将其最高位往下全部变为1，再类似bitsCount数其中1的个数就行了。</p>\n</blockquote>\n<blockquote>\n<p>我把 x 移位相与，保证最高位往下所有数字为1，再使用bitsCount就得到答案。</p>\n</blockquote>\n<blockquote>\n<p>最后不要忘记减一</p>\n</blockquote>\n<hr>\n<h3 id=\"13-float-neg–浮点数的负数\"><a href=\"#13-float-neg–浮点数的负数\" class=\"headerlink\" title=\"13. float_neg–浮点数的负数\"></a><strong>13. float_neg–浮点数的负数</strong></h3><p><strong>题目：</strong></p>\n<pre><code>返回-f，当NaN时，返回参数f</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 10</p>\n<p><strong>使用操作数：</strong> 5</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_neg</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> frac = uf &amp; <span class=\"hljs-number\">0x007fffff</span>;\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span> &amp;&amp; frac)\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">return</span> uf ^= <span class=\"hljs-number\">0x80000000</span>;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<ul>\n<li>IEEE-float<blockquote>\n<p>我们知道IEEE单精度浮点数，最高位为符号位，其后8位为阶码exp，后23位为尾数frac。其牺牲了精度来扩大了表达范围。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>而当 exp 全 1 时，如若frac非全零，则表示NaN。若全零，则表示无穷大/小。</p>\n</blockquote>\n<blockquote>\n<p>这里我们只要将原数和符号位0x80000000异或一下，即可取负。不要忘记排除NaN的情况。</p>\n</blockquote>\n<hr>\n<h3 id=\"14-float-i2f–int转float\"><a href=\"#14-float-i2f–int转float\" class=\"headerlink\" title=\"14. float_i2f–int转float\"></a><strong>14. float_i2f–int转float</strong></h3><p><strong>题目：</strong></p>\n<pre><code>把int类型的数转换为float表示(比特形式)</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 30</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_i2f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> frac, mask1, mask2, mask3, mask4, d;\n  <span class=\"hljs-keyword\">int</span> high = <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> sign = x &amp; <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = <span class=\"hljs-number\">127</span>;\n  <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">32</span>, i;\n  <span class=\"hljs-keyword\">if</span>(sign)\n    x = ~x + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!x)\n    <span class=\"hljs-keyword\">return</span> x;\n  \n  frac = x;\n\n  <span class=\"hljs-keyword\">for</span>(;high; high &gt;&gt;= <span class=\"hljs-number\">1</span>)\n  &#123;\n    --count;\n    <span class=\"hljs-keyword\">if</span>(high &amp; x)\n      <span class=\"hljs-keyword\">break</span>;\n  &#125;\n  i = count - <span class=\"hljs-number\">23</span>;\n  mask1 = ~(<span class=\"hljs-number\">1</span> &lt;&lt; count); <span class=\"hljs-comment\">// the highest 1</span>\n  mask2 = <span class=\"hljs-number\">1</span> &lt;&lt; i; <span class=\"hljs-comment\">//the lowest of remain frac;</span>\n  mask3 = mask2 &gt;&gt; <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// the highest of deserted bits </span>\n  mask4 = mask2 - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// the deserted bits</span>\n  <span class=\"hljs-built_in\">exp</span> += count;\n\n  frac &amp;= mask1;\n  \n  <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">0</span>)\n  &#123;\n    d = frac &amp; mask4; <span class=\"hljs-comment\">// deserted bits</span>\n    <span class=\"hljs-keyword\">if</span>(d &gt; mask3 | (d == mask3 &amp;&amp; frac &amp; mask2))\n    &#123;\n      frac += mask2;\n      <span class=\"hljs-keyword\">if</span>(frac &gt; <span class=\"hljs-number\">0x3fffffff</span>)\n      &#123;\n        frac = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-built_in\">exp</span>++;\n      &#125;\n    &#125;\n    frac &gt;&gt;= i;\n  &#125;\n  <span class=\"hljs-keyword\">else</span>\n    frac &lt;&lt;= -i;\n\n  <span class=\"hljs-keyword\">return</span> sign | <span class=\"hljs-built_in\">exp</span> &lt;&lt; <span class=\"hljs-number\">23</span> | frac;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>我认为这题比较难，我做了很久很久….它难在浮点数向偶数舍入以及其操作数的限制。</p>\n</blockquote>\n<blockquote>\n<p>我们知道由于浮点数表示范围比整型大，我们可以将整型转换为浮点数，但是相应的会有一些精度的丢失，因为尾数frac只有23位，而int有31位可用。</p>\n</blockquote>\n<blockquote>\n<p>所以其关键在于int的位数，一开始先把该取出来的都用掩码取出来，把负数和零处理一下。之后我利用了一个循环先找出int的最高位在哪，利用count计数。</p>\n</blockquote>\n<blockquote>\n<p>后面我采取了四个掩码，分别代表最高位的1，留下的尾数中的最低位，要舍去的位数的最高位，以及舍弃的位数的掩码。利用这四个掩码我们可以达到存frac时，将其向<strong>偶数舍入</strong>。</p>\n</blockquote>\n<blockquote>\n<p>具体操作是，先取出丢弃的尾数，将其存放在d中，看其有没有超过0.5 (即 d 是否大于 mask3) 如果大于，直接frac++就行。而如果等于的话，还要看frac是否是奇数 (即frac &amp; mask2是否为1) 如果是，则要向偶数舍入,frac++。</p>\n</blockquote>\n<blockquote>\n<p>加完frac之后还要注意<strong>溢出问题</strong>，如果溢出了，要将frac置0，然后把阶码 exp++，再按照之前输出来的尾数移动，将尾数对齐即可 （位数最高默认为1不存，因而把最高位隐去）。</p>\n</blockquote>\n<blockquote>\n<p>最后把符号位，阶码位和尾数位拼接，得到最后的结果。</p>\n</blockquote>\n<hr>\n<h3 id=\"15-float-twice–float-2\"><a href=\"#15-float-twice–float-2\" class=\"headerlink\" title=\"15. float_twice–float * 2\"></a>15. float_twice–float * 2</h3><p><strong>题目：</strong></p>\n<pre><code>返回float * 2, 当参数是NaN时，返回参数</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 20</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-title\">float_twice</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span> </span>&#123;\n  <span class=\"hljs-keyword\">unsigned</span> sign = uf &amp; <span class=\"hljs-number\">0x80000000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n  <span class=\"hljs-keyword\">unsigned</span> frac = uf &amp; <span class=\"hljs-number\">0x007fffff</span>;\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span>) <span class=\"hljs-comment\">//NaN &amp; inf</span>\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; !frac) <span class=\"hljs-comment\">// 0</span>\n    <span class=\"hljs-keyword\">return</span> uf;\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; frac &lt;= <span class=\"hljs-number\">0x3fffff</span>)  <span class=\"hljs-comment\">// low</span>\n    frac *= <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">exp</span> &amp;&amp; frac &gt; <span class=\"hljs-number\">0x3fffff</span>) <span class=\"hljs-comment\">// high</span>\n  &#123;\n    <span class=\"hljs-built_in\">exp</span> += <span class=\"hljs-number\">0x00800000</span>;\n    frac = (frac * <span class=\"hljs-number\">2</span>) &amp; <span class=\"hljs-number\">0x7fffff</span>;\n  &#125;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">// normal</span>\n    <span class=\"hljs-built_in\">exp</span> += <span class=\"hljs-number\">0x00800000</span>;\n  <span class=\"hljs-keyword\">return</span> sign + <span class=\"hljs-built_in\">exp</span> + frac;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>主要要分析的地方，在于当阶码exp为0时，是否在乘2之后进位。所以要考虑尾数是否大于0x3fffff，如果小于等于之，则直接尾数乘2就行，不会溢出，否则则exp要进位，同时尾数乘2之后要与上0x7fffff保证不溢出。</p>\n</blockquote>\n<blockquote>\n<p>其他正常情况直接exp++就行，注意一下特殊情况;</p>\n</blockquote>\n<p><em>本题中测试集中有一个inf，也要直接返回参数uf</em></p>\n<hr>\n<h2 id=\"Bits-honor-c\"><a href=\"#Bits-honor-c\" class=\"headerlink\" title=\"Bits_honor.c\"></a><strong>Bits_honor.c</strong></h2><h3 id=\"1-bitReverse–比特翻转\"><a href=\"#1-bitReverse–比特翻转\" class=\"headerlink\" title=\"1. bitReverse–比特翻转\"></a><strong>1. bitReverse–比特翻转</strong></h3><p><strong>题目：</strong></p>\n<pre><code>把32比特int的比特位翻转</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>bitReverse(0x80000004) = 0x20000001\nbitReverse(0x7FFFFFFF) = 0xFFFFFFFE</code></pre>\n<p><strong>最大操作数限制：</strong> 40</p>\n<p><strong>使用操作数：</strong> 40</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitReverse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> tmp,l1, l2, l4, l8, l16;\n\n   tmp = (<span class=\"hljs-number\">0x55</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x55</span>;\n   l1 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   tmp = (<span class=\"hljs-number\">0x33</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x33</span>;\n   l2 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   tmp = (<span class=\"hljs-number\">0x0f</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0x0f</span>;\n   l4 = (tmp &lt;&lt; <span class=\"hljs-number\">16</span>) + tmp;\n   l8 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">0xff</span>;\n   l16 = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n   x = ((x &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; l16) | (x &lt;&lt; <span class=\"hljs-number\">16</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; l8) | ((x &amp; l8) &lt;&lt; <span class=\"hljs-number\">8</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; l4) | ((x &amp; l4) &lt;&lt; <span class=\"hljs-number\">4</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">2</span>) &amp; l2) | ((x &amp; l2) &lt;&lt; <span class=\"hljs-number\">2</span>);\n   x = ((x &gt;&gt; <span class=\"hljs-number\">1</span>) &amp; l1) | ((x &amp; l1) &lt;&lt; <span class=\"hljs-number\">1</span>);\n   <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题和 bitsCount 有异曲同工之妙，也是一个分治法，将32位二进制数一分为二，交换，再将内部各自再一分为二，交换，直至最底层2位二进制数互换位置，最后完成了将所有位数翻转的工作。</p>\n</blockquote>\n<blockquote>\n<p>但值得注意的是，给出的是有符号的int，所以在右移交换位置时，会发生因为负数算术右移导致高位全是1的情况，致使在与的过程中高位全部变为1。这边只要将其移动后在和掩码相与就能解决这一问题。而对于低位，先与掩码相与再移动，可以省去取反得到高位掩码的操作数。再用tmp省一下操作数。</p>\n</blockquote>\n<blockquote>\n<p>最后操作数正好卡在40</p>\n</blockquote>\n<hr>\n<h3 id=\"2-mod3–取模3\"><a href=\"#2-mod3–取模3\" class=\"headerlink\" title=\"2. mod3–取模3\"></a><strong>2. mod3–取模3</strong></h3><p><strong>题目：</strong></p>\n<pre><code>计算 x 取模 3，而不用%</code></pre>\n<p><strong>样例：</strong></p>\n<pre><code>mod3(100) = 1\nmod3(-100) = -1</code></pre>\n<p><strong>可使用操作：</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p><strong>最大操作数限制：</strong> 90</p>\n<p><strong>使用操作数：</strong> 24</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">mod3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> mask = (<span class=\"hljs-number\">0xff</span> &lt;&lt; <span class=\"hljs-number\">8</span>) + <span class=\"hljs-number\">0xff</span>;\n\n   x = (x &gt;&gt; <span class=\"hljs-number\">16</span>) + (x &amp; mask); <span class=\"hljs-comment\">// sum base 4^8 digits (a &lt;= 0x1FFFE)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">8</span>) + (x &amp; <span class=\"hljs-number\">0xff</span>); <span class=\"hljs-comment\">// sum base 4^4 digits (a &lt;= 0x2FD)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">4</span>) + (x &amp; <span class=\"hljs-number\">0xf</span>); <span class=\"hljs-comment\">// sum base 4^2 digits (a &lt;= 0x3C)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x1D)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x9)</span>\n   x = (x &gt;&gt; <span class=\"hljs-number\">2</span>) + (x &amp; <span class=\"hljs-number\">0x3</span>); <span class=\"hljs-comment\">// sum base 4^1 digits (a &lt;= 0x4)</span>\n\n   x = (((x + <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">2</span>) + x) &amp; <span class=\"hljs-number\">0x3</span>;\n   <span class=\"hljs-keyword\">return</span> x;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题难度算是比较大的，我参考了一些资料最后才写出这个代码。其实这题也与bitsCount有着一定的联系。</p>\n</blockquote>\n<blockquote>\n<p>对于解这题有一个根本的公式即 </p>\n</blockquote>\n<pre><code>a % m = ((b % m)(a/b) + (a % b)) % m\n其中b是进制数</code></pre>\n<blockquote>\n<p>我们知道，如果想要知道一个十进制的数能否被三整除，只要看它所有数位之和是否能被三整除就行了。其实这就是上述公式的特殊情况，由于10 mod 3 == 1 所以其就退化为</p>\n</blockquote>\n<pre><code>a mod m = (a/b + a % b) % m\n递归下来就是所有数位之和</code></pre>\n<blockquote>\n<p>而对于二进制的情况，我们可以将进制位b选为4，这样正好是两位二进制数，同时4 % 3 == 1，这样一来，对于二进制数中我们只需要统计所有两两数位(四进制)的和能否被三整除就行了。</p>\n</blockquote>\n<blockquote>\n<p>而考虑到我们每做一次 a/b + a % b 统计数位和都减小了数的规模，这样只要做有限次就能够将数控制在&lt;=3的范围内。</p>\n</blockquote>\n<blockquote>\n<p>对于a % 4，这是一个经典的trivial情况，我们只需要做 a &amp; 3，就能够轻松得到a % 4的值。而对于a/4，只需要做a &gt;&gt; 2即可。</p>\n</blockquote>\n<blockquote>\n<p>对于二进制数我们不仅可以按两位两位的四进制数位和来数，也可以直接数其倍数(4^i)，从最大4^8开始统计，一步步减小x的值，最后将x做到&lt;= 3的范围</p>\n</blockquote>\n<blockquote>\n<p>最后要判断x是否为3，如果为3的话则要置为0，我利用3数位全为1的特点，将其+1进位后，右移2位。如果为3，则得到的是1。将其再加上x，如若x是1或2，则还是不变，但如果是3，它又会进位到4，那么我们只要再与上0x3，则会得到0，即为想要的结果。</p>\n</blockquote>\n<hr>\n<h3 id=\"3-float-f2i–float转int\"><a href=\"#3-float-f2i–float转int\" class=\"headerlink\" title=\"3. float_f2i–float转int\"></a><strong>3. float_f2i–float转int</strong></h3><p><strong>题目：</strong></p>\n<pre><code>输入一个按二进制位储存的float（以unsigned表示），将其转为int输出。(NaN,inf，溢出直接返回参数)</code></pre>\n<p><strong>可使用操作：</strong> 所有的整型操作，包括 ||, &amp;&amp;. 以及 if, while</p>\n<p><strong>最大操作数限制：</strong> 30</p>\n<p><strong>使用操作数：</strong> 17</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">float_f2i</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> uf)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n   <span class=\"hljs-keyword\">int</span> sign, <span class=\"hljs-built_in\">exp</span>, frac, res;\n   <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> tmp;\n\n   <span class=\"hljs-keyword\">if</span>(!uf)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n   sign = uf &amp; <span class=\"hljs-number\">0x80000000</span>;\n   <span class=\"hljs-built_in\">exp</span> = uf &amp; <span class=\"hljs-number\">0x7f800000</span>;\n   frac = (uf &amp; <span class=\"hljs-number\">0x007fffff</span>) | <span class=\"hljs-number\">0x00800000</span>;\n\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> == <span class=\"hljs-number\">0x7f800000</span>) <span class=\"hljs-comment\">//NaN and inf</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0x80000000</span>u;\n\n   <span class=\"hljs-built_in\">exp</span> &gt;&gt;= <span class=\"hljs-number\">23</span>;\n\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &lt; <span class=\"hljs-number\">127</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &gt; <span class=\"hljs-number\">158</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0x80000000</span>u;\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">exp</span> &gt; <span class=\"hljs-number\">150</span>)\n      tmp = frac &lt;&lt; (<span class=\"hljs-built_in\">exp</span> - <span class=\"hljs-number\">150</span>);\n   <span class=\"hljs-keyword\">else</span>\n      tmp = frac &gt;&gt; (<span class=\"hljs-number\">150</span> - <span class=\"hljs-built_in\">exp</span>);\n\n      \n   <span class=\"hljs-keyword\">if</span>(sign)\n      res = ~tmp + <span class=\"hljs-number\">1</span>;\n   <span class=\"hljs-keyword\">else</span>\n      res = tmp;\n   \n   <span class=\"hljs-keyword\">return</span> res | sign;\n&#125;</code></pre>\n\n<p><strong>分析：</strong></p>\n<blockquote>\n<p>这题特殊情况比较多，把NaN和inf处理一下，然后注意一下溢出情况，即取出来的exp - bias &gt; 31，肯定超过2^31整型储存的最大值，直接返回0x80000000u，然后对于exp小于127的，其指数是负数，直接返回int值为0。对于在exp - bias 在 0 到 31 之间的，由于frac只有23位，所以要将注意一下讨论23的情况。</p>\n</blockquote>\n<blockquote>\n<p>最后把取出来的符号位对一下，如果负数取反加一，正数直接等，最后再或上符号位，返回答案。</p>\n</blockquote>\n<hr>\n<h2 id=\"结果截图\"><a href=\"#结果截图\" class=\"headerlink\" title=\"结果截图\"></a><strong>结果截图</strong></h2><h3 id=\"bits-c\"><a href=\"#bits-c\" class=\"headerlink\" title=\"bits.c\"></a><strong>bits.c</strong></h3><p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_btest.JPG\" alt=\"bits_btest\"></p>\n<p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_dlc.png\" alt=\"bits_dlc\"></p>\n<h3 id=\"bits-honor-c\"><a href=\"#bits-honor-c\" class=\"headerlink\" title=\"bits_honor.c\"></a><strong>bits_honor.c</strong></h3><p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_honor_btest.JPG\" alt=\"bits_honor_btest\"></p>\n<p><img src=\"/CsBlog/CsBlog/2020/11/05/ICS_Lab1/ICS_Lab1/bits_honor_dlc.png\" alt=\"bits_honor_dlc\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p><a href=\"https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin\">https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB/3711081?fr=aladdin</a><br><a href=\"https://blog.csdn.net/jiahonghao2002/article/details/108223366\">https://blog.csdn.net/jiahonghao2002/article/details/108223366</a><br><a href=\"https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/\">https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode/</a><br><a href=\"http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3\">http://homepage.cs.uiowa.edu/~jones/bcd/mod.shtml#exmod3</a><br><a href=\"https://www.zhihu.com/question/38206659/answer/763034261\">https://www.zhihu.com/question/38206659/answer/763034261</a><br><a href=\"https://blog.csdn.net/xindaxinda123/article/details/95617758\">https://blog.csdn.net/xindaxinda123/article/details/95617758</a><br><a href=\"https://www.runoob.com/w3cnote/32-float-storage.html\">https://www.runoob.com/w3cnote/32-float-storage.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckh6bkz8k0001kopdad4gg70z","category_id":"ckh6bkz8n0003kopde2cv45a7","_id":"ckh6bkz8q0007kopd16nq9ub5"},{"post_id":"ckh6bkz8r000bkopd3eo513c6","category_id":"ckh6bkz8n0003kopde2cv45a7","_id":"ckh6bkz8t000dkopd1n8m7vf1"}],"PostTag":[{"post_id":"ckh6bkz8k0001kopdad4gg70z","tag_id":"ckh6bkz8o0004kopd9ln0ggjo","_id":"ckh6bkz8p0006kopd747hdy7b"},{"post_id":"ckh6bkz8m0002kopd6vcpafrl","tag_id":"ckh6bkz8p0005kopddbj1cncn","_id":"ckh6bkz8q0009kopddlwc3bjz"},{"post_id":"ckh6bkz8m0002kopd6vcpafrl","tag_id":"ckh6bkz8q0008kopd89t5hwgd","_id":"ckh6bkz8q000akopdawsm6a0n"},{"post_id":"ckh6bkz8r000bkopd3eo513c6","tag_id":"ckh6bkz8t000ckopd53n6bqxp","_id":"ckh6bkz8t000ekopd9pte4y02"}],"Tag":[{"name":"Assembly","_id":"ckh6bkz8o0004kopd9ln0ggjo"},{"name":"Hexo","_id":"ckh6bkz8p0005kopddbj1cncn"},{"name":"Fluid","_id":"ckh6bkz8q0008kopd89t5hwgd"},{"name":"Bits","_id":"ckh6bkz8t000ckopd53n6bqxp"}]}}